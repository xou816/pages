# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Represents an object which can take actions on GitHub. Typically a User or Bot."
interface GitHub_Actor {
    "A URL pointing to the actor's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "The username of the actor."
    login: String!
    "The HTTP path for this actor."
    resourcePath: GitHub_URI!
    "The HTTP URL for this actor."
    url: GitHub_URI!
}

"An object that can have users assigned to it."
interface GitHub_Assignable {
    "A list of Users assigned to this object."
    assignees(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
}

"An object that can be closed"
interface GitHub_Closable {
    "`true` if the object is closed (definition of closed may depend on type)"
    closed: Boolean!
    "Identifies the date and time when the object was closed."
    closedAt: GitHub_DateTime
}

"Represents a comment."
interface GitHub_Comment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "The body as Markdown."
    body: String!
    "The body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body rendered to text."
    bodyText: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"Represents a contribution a user made on GitHub, such as opening an issue."
interface GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"Entities that can be deleted."
interface GitHub_Deletable {
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
}

"Represents a Git object."
interface GitHub_GitObject {
    "An abbreviated version of the Git object ID"
    abbreviatedOid: String!
    "The HTTP path for this Git object"
    commitResourcePath: GitHub_URI!
    "The HTTP URL for this Git object"
    commitUrl: GitHub_URI!
    id: ID!
    "The Git object ID"
    oid: GitHub_GitObjectID!
    "The Repository the Git object belongs to"
    repository: GitHub_Repository!
}

"Information about a signature (GPG or S/MIME) on a Commit or Tag."
interface GitHub_GitSignature {
    "Email used to sign this object."
    email: String!
    "True if the signature is valid and verified by GitHub."
    isValid: Boolean!
    "Payload for GPG signing object. Raw ODB object without the signature header."
    payload: String!
    "ASCII-armored signature header from object."
    signature: String!
    "GitHub user corresponding to the email signing this commit."
    signer: GitHub_User
    """
    The state of this signature. `VALID` if signature is valid and verified by
    GitHub, otherwise represents reason why signature is considered invalid.
    """
    state: GitHub_GitSignatureState!
    "True if the signature was made with GitHub's signing key."
    wasSignedByGitHub: Boolean!
}

"An object that can have labels assigned to it."
interface GitHub_Labelable {
    "A list of labels associated with the object."
    labels(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_LabelConnection
}

"An object that can be locked."
interface GitHub_Lockable {
    "Reason that the conversation was locked."
    activeLockReason: GitHub_LockReason
    "`true` if the object is locked"
    locked: Boolean!
}

"Entities that have members who can set status messages."
interface GitHub_MemberStatusable {
    "Get the status messages members of this entity have set that are either public or visible only to the organization."
    memberStatuses(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for user statuses returned from the connection.
        orderBy: GitHub_UserStatusOrder
    ): GitHub_UserStatusConnection!
}

"An object with an ID."
interface GitHub_Node {
    "ID of the object."
    id: ID!
}

"Represents any entity on GitHub that has a profile page."
interface GitHub_ProfileOwner {
    "Determine if this repository owner has any items that can be pinned to their profile."
    anyPinnableItems(
        #Filter to only a particular kind of pinnable item.
        type: GitHub_PinnableItemType
    ): Boolean!
    "The public profile email."
    email: String
    id: ID!
    """
    Showcases a selection of repositories and gists that the profile owner has
    either curated or that have been selected automatically based on popularity.
    """
    itemShowcase: GitHub_ProfileItemShowcase!
    "The public profile location."
    location: String
    "The username used to login."
    login: String!
    "The public profile name."
    name: String
    "A list of repositories and gists this profile owner can pin to their profile."
    pinnableItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinnable items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "A list of repositories and gists this profile owner has pinned to their profile"
    pinnedItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinned items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "Returns how many more items this profile owner can pin to their profile."
    pinnedItemsRemaining: Int!
    "Can the viewer pin repositories and gists to the profile?"
    viewerCanChangePinnedItems: Boolean!
    "The public profile website URL."
    websiteUrl: GitHub_URI
}

"Represents an owner of a Project."
interface GitHub_ProjectOwner {
    id: ID!
    "Find project by number."
    project(
        #The project number to find.
        number: Int!
    ): GitHub_Project
    "A list of projects under the owner."
    projects(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for projects returned from the connection
        orderBy: GitHub_ProjectOrder,
        #Query to search projects by, currently only searching by name.
        search: String,
        #A list of states to filter the projects by.
        states: [GitHub_ProjectState!]
    ): GitHub_ProjectConnection!
    "The HTTP path listing owners projects"
    projectsResourcePath: GitHub_URI!
    "The HTTP URL listing owners projects"
    projectsUrl: GitHub_URI!
    "Can the current viewer create new projects on this owner."
    viewerCanCreateProjects: Boolean!
}

"Represents a subject that can be reacted on."
interface GitHub_Reactable {
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "Can user react to this subject"
    viewerCanReact: Boolean!
}

"Represents an owner of a registry package."
interface GitHub_RegistryPackageOwner {
    id: ID!
}

"Represents an interface to search packages on an object."
interface GitHub_RegistryPackageSearch {
    id: ID!
}

"A subset of repository info."
interface GitHub_RepositoryInfo {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The description of the repository."
    description: String
    "The description of the repository rendered to HTML."
    descriptionHTML: GitHub_HTML!
    "Returns how many forks there are of this repository in the whole network."
    forkCount: Int!
    "Indicates if the repository has issues feature enabled."
    hasIssuesEnabled: Boolean!
    "Indicates if the repository has wiki feature enabled."
    hasWikiEnabled: Boolean!
    "The repository's URL."
    homepageUrl: GitHub_URI
    "Indicates if the repository is unmaintained."
    isArchived: Boolean!
    "Identifies if the repository is a fork."
    isFork: Boolean!
    "Indicates if the repository has been locked or not."
    isLocked: Boolean!
    "Identifies if the repository is a mirror."
    isMirror: Boolean!
    "Identifies if the repository is private."
    isPrivate: Boolean!
    "The license associated with the repository"
    licenseInfo: GitHub_License
    "The reason the repository has been locked."
    lockReason: GitHub_RepositoryLockReason
    "The repository's original mirror URL."
    mirrorUrl: GitHub_URI
    "The name of the repository."
    name: String!
    "The repository's name with owner."
    nameWithOwner: String!
    "The User owner of the repository."
    owner: GitHub_RepositoryOwner!
    "Identifies when the repository was last pushed to."
    pushedAt: GitHub_DateTime
    "The HTTP path for this repository"
    resourcePath: GitHub_URI!
    "A description of the repository, rendered to HTML without any links in it."
    shortDescriptionHTML(
        #How many characters to return.
        limit: Int = 200
    ): GitHub_HTML!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this repository"
    url: GitHub_URI!
}

"Represents a object that belongs to a repository."
interface GitHub_RepositoryNode {
    "The repository associated with this node."
    repository: GitHub_Repository!
}

"Represents an owner of a Repository."
interface GitHub_RepositoryOwner {
    "A URL pointing to the owner's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    id: ID!
    "The username used to login."
    login: String!
    "A list of repositories this user has pinned to their profile"
    pinnedRepositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection! @deprecated(reason : "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.")
    "A list of repositories that the user owns."
    repositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they are forks of another repository
        isFork: Boolean,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "Find Repository."
    repository(
        #Name of Repository to find.
        name: String!
    ): GitHub_Repository
    "The HTTP URL for the owner."
    resourcePath: GitHub_URI!
    "The HTTP URL for the owner."
    url: GitHub_URI!
}

"Things that can be starred."
interface GitHub_Starrable {
    id: ID!
    "A list of users who have starred this starrable."
    stargazers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_StarOrder
    ): GitHub_StargazerConnection!
    "Returns a boolean indicating whether the viewing user has starred this starrable."
    viewerHasStarred: Boolean!
}

"Entities that can be subscribed to for web and email notifications."
interface GitHub_Subscribable {
    id: ID!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
}

"Represents a type that can be retrieved by a URL."
interface GitHub_UniformResourceLocatable {
    "The HTML path to this resource."
    resourcePath: GitHub_URI!
    "The URL to this resource."
    url: GitHub_URI!
}

"Entities that can be updated."
interface GitHub_Updatable {
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
}

"Comments that can be updated."
interface GitHub_UpdatableComment {
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

"The object which triggered a `ClosedEvent`."
union GitHub_Closer = GitHub_Commit | GitHub_PullRequest

"Types that can be inside Collection Items."
union GitHub_CollectionItemContent = GitHub_Organization | GitHub_Repository | GitHub_User

"Represents either a issue the viewer can access or a restricted contribution."
union GitHub_CreatedIssueOrRestrictedContribution = GitHub_CreatedIssueContribution | GitHub_RestrictedContribution

"Represents either a pull request the viewer can access or a restricted contribution."
union GitHub_CreatedPullRequestOrRestrictedContribution = GitHub_CreatedPullRequestContribution | GitHub_RestrictedContribution

"Represents either a repository the viewer can access or a restricted contribution."
union GitHub_CreatedRepositoryOrRestrictedContribution = GitHub_CreatedRepositoryContribution | GitHub_RestrictedContribution

"Used for return value of Repository.issueOrPullRequest."
union GitHub_IssueOrPullRequest = GitHub_Issue | GitHub_PullRequest

"An item in an issue timeline"
union GitHub_IssueTimelineItem = GitHub_AssignedEvent | GitHub_ClosedEvent | GitHub_Commit | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MilestonedEvent | GitHub_ReferencedEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

"An item in an issue timeline"
union GitHub_IssueTimelineItems = GitHub_AddedToProjectEvent | GitHub_AssignedEvent | GitHub_ClosedEvent | GitHub_CommentDeletedEvent | GitHub_ConvertedNoteToIssueEvent | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MentionedEvent | GitHub_MilestonedEvent | GitHub_MovedColumnsInProjectEvent | GitHub_PinnedEvent | GitHub_ReferencedEvent | GitHub_RemovedFromProjectEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnpinnedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

"Types that can be inside a Milestone."
union GitHub_MilestoneItem = GitHub_Issue | GitHub_PullRequest

"Types that can grant permissions on a repository to a user"
union GitHub_PermissionGranter = GitHub_Organization | GitHub_Repository | GitHub_Team

"Types that can be pinned to a profile page."
union GitHub_PinnableItem = GitHub_Gist | GitHub_Repository

"Types that can be inside Project Cards."
union GitHub_ProjectCardItem = GitHub_Issue | GitHub_PullRequest

"An item in an pull request timeline"
union GitHub_PullRequestTimelineItem = GitHub_AssignedEvent | GitHub_BaseRefForcePushedEvent | GitHub_ClosedEvent | GitHub_Commit | GitHub_CommitCommentThread | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_DeployedEvent | GitHub_DeploymentEnvironmentChangedEvent | GitHub_HeadRefDeletedEvent | GitHub_HeadRefForcePushedEvent | GitHub_HeadRefRestoredEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MergedEvent | GitHub_MilestonedEvent | GitHub_PullRequestReview | GitHub_PullRequestReviewComment | GitHub_PullRequestReviewThread | GitHub_ReferencedEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_ReviewDismissedEvent | GitHub_ReviewRequestRemovedEvent | GitHub_ReviewRequestedEvent | GitHub_SubscribedEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

"An item in a pull request timeline"
union GitHub_PullRequestTimelineItems = GitHub_AddedToProjectEvent | GitHub_AssignedEvent | GitHub_BaseRefChangedEvent | GitHub_BaseRefForcePushedEvent | GitHub_ClosedEvent | GitHub_CommentDeletedEvent | GitHub_ConvertedNoteToIssueEvent | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_DeployedEvent | GitHub_DeploymentEnvironmentChangedEvent | GitHub_HeadRefDeletedEvent | GitHub_HeadRefForcePushedEvent | GitHub_HeadRefRestoredEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MentionedEvent | GitHub_MergedEvent | GitHub_MilestonedEvent | GitHub_MovedColumnsInProjectEvent | GitHub_PinnedEvent | GitHub_PullRequestCommit | GitHub_PullRequestCommitCommentThread | GitHub_PullRequestReview | GitHub_PullRequestReviewThread | GitHub_PullRequestRevisionMarker | GitHub_ReferencedEvent | GitHub_RemovedFromProjectEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_ReviewDismissedEvent | GitHub_ReviewRequestRemovedEvent | GitHub_ReviewRequestedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnpinnedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

"Types that can be an actor."
union GitHub_PushAllowanceActor = GitHub_Team | GitHub_User

"Any referencable object"
union GitHub_ReferencedSubject = GitHub_Issue | GitHub_PullRequest

"An object which has a renamable title"
union GitHub_RenamedTitleSubject = GitHub_Issue | GitHub_PullRequest

"Types that can be requested reviewers."
union GitHub_RequestedReviewer = GitHub_Mannequin | GitHub_Team | GitHub_User

"Types that can be an actor."
union GitHub_ReviewDismissalAllowanceActor = GitHub_Team | GitHub_User

"The results of a search."
union GitHub_SearchResultItem = GitHub_Issue | GitHub_MarketplaceListing | GitHub_Organization | GitHub_PullRequest | GitHub_Repository | GitHub_User

type Directory implements Node {
    absolutePath: String
    accessTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atimeMs: Float
    base: String
    birthTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtimeMs: Float
    blksize: Int
    blocks: Int
    changeTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    children: [Node!]!
    ctime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    ctimeMs: Float
    dev: Int
    dir: String
    ext: String
    extension: String
    gid: Int
    id: ID!
    ino: Int
    internal: Internal!
    mode: Int
    modifiedTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtimeMs: Float
    name: String
    nlink: Int
    parent: Node
    prettySize: String
    rdev: Int
    relativeDirectory: String
    relativePath: String
    root: String
    size: Int
    sourceInstanceName: String
    uid: Int
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String
    accessTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atimeMs: Float
    base: String
    birthTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtimeMs: Float
    blksize: Int
    blocks: Int
    changeTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    childImageSharp: ImageSharp
    childMarkdownRemark: MarkdownRemark
    children: [Node!]!
    childrenJobsYaml: [JobsYaml]
    childrenProjectsYaml: [ProjectsYaml]
    ctime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    ctimeMs: Float
    dev: Int
    dir: String
    ext: String
    extension: String
    gid: Int
    id: ID!
    ino: Int
    internal: Internal!
    mode: Int
    modifiedTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtimeMs: Float
    name: String
    nlink: Int
    parent: Node
    prettySize: String
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int
    relativeDirectory: String
    relativePath: String
    root: String
    size: Int
    sourceInstanceName: String
    uid: Int
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GitHub {
    "Look up a code of conduct by its key"
    codeOfConduct(
        #The code of conduct's key
        key: String!
    ): GitHub_CodeOfConduct
    "Look up a code of conduct by its key"
    codesOfConduct: [GitHub_CodeOfConduct]
    "Look up an open source license by its key"
    license(
        #The license's downcased SPDX ID
        key: String!
    ): GitHub_License
    "Return a list of known open source licenses"
    licenses: [GitHub_License]!
    "Get alphabetically sorted list of Marketplace categories"
    marketplaceCategories(
        #Exclude categories with no listings.
        excludeEmpty: Boolean,
        #Returns top level categories only, excluding any subcategories.
        excludeSubcategories: Boolean,
        #Return only the specified categories.
        includeCategories: [String!]
    ): [GitHub_MarketplaceCategory!]!
    "Look up a Marketplace category by its slug."
    marketplaceCategory(
        #The URL slug of the category.
        slug: String!,
        #Also check topic aliases for the category slug
        useTopicAliases: Boolean
    ): GitHub_MarketplaceCategory
    "Look up a single Marketplace listing"
    marketplaceListing(
        #Select the listing that matches this slug. It's the short name of the listing used in its URL.
        slug: String!
    ): GitHub_MarketplaceListing
    "Look up Marketplace listings"
    marketplaceListings(
        #Select listings that can be administered by the specified user.
        adminId: ID,
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        """

        Select listings visible to the viewer even if they are not approved. If omitted or
        false, only approved listings will be returned.
        """
        allStates: Boolean,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Select only listings with the given category.
        categorySlug: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Select listings for products owned by the specified organization.
        organizationId: ID,
        #Select only listings where the primary category matches the given category slug.
        primaryCategoryOnly: Boolean = false,
        #Select the listings with these slugs, if they are visible to the viewer.
        slugs: [String],
        #Also check topic aliases for the category slug
        useTopicAliases: Boolean,
        """

        Select listings to which user has admin access. If omitted, listings visible to the
        viewer are returned.
        """
        viewerCanAdmin: Boolean,
        #Select only listings that offer a free trial.
        withFreeTrialsOnly: Boolean = false
    ): GitHub_MarketplaceListingConnection!
    "Return information about the GitHub instance"
    meta: GitHub_GitHubMetadata!
    "Fetches an object given its ID."
    node(
        #ID of the object.
        id: ID!
    ): GitHub_Node
    "Lookup nodes by a list of IDs."
    nodes(
        #The list of node IDs.
        ids: [ID!]!
    ): [GitHub_Node]!
    "Lookup a organization by login."
    organization(
        #The organization's login.
        login: String!
    ): GitHub_Organization
    "The client's rate limit information."
    rateLimit(
        #If true, calculate the cost for the query without evaluating it
        dryRun: Boolean = false
    ): GitHub_RateLimit
    "Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object"
    relay: Query!
    "Lookup a given repository by the owner and repository name."
    repository(
        #The name of the repository
        name: String!,
        #The login field of a user or organization
        owner: String!
    ): GitHub_Repository
    "Lookup a repository owner (ie. either a User or an Organization) by login."
    repositoryOwner(
        #The username to lookup the owner by.
        login: String!
    ): GitHub_RepositoryOwner
    "Lookup resource by a URL."
    resource(
        #The URL.
        url: GitHub_URI!
    ): GitHub_UniformResourceLocatable
    "Perform a search across resources."
    search(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #The search string to look for.
        query: String!,
        #The types of search items to search within.
        type: GitHub_SearchType!
    ): GitHub_SearchResultItemConnection!
    "GitHub Security Advisories"
    securityAdvisories(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Filter advisories by identifier, e.g. GHSA or CVE.
        identifier: GitHub_SecurityAdvisoryIdentifierFilter,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for the returned topics.
        orderBy: GitHub_SecurityAdvisoryOrder,
        #Filter advisories to those published since a time in the past.
        publishedSince: GitHub_DateTime,
        #Filter advisories to those updated since a time in the past.
        updatedSince: GitHub_DateTime
    ): GitHub_SecurityAdvisoryConnection!
    "Fetch a Security Advisory by its GHSA ID"
    securityAdvisory(
        #GitHub Security Advisory ID.
        ghsaId: String!
    ): GitHub_SecurityAdvisory
    "Software Vulnerabilities documented by GitHub Security Advisories"
    securityVulnerabilities(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #An ecosystem to filter vulnerabilities by.
        ecosystem: GitHub_SecurityAdvisoryEcosystem,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for the returned topics.
        orderBy: GitHub_SecurityVulnerabilityOrder,
        #A package name to filter vulnerabilities by.
        package: String,
        #A list of severities to filter vulnerabilities by.
        severities: [GitHub_SecurityAdvisorySeverity!]
    ): GitHub_SecurityVulnerabilityConnection!
    "Look up a topic by name."
    topic(
        #The topic's name.
        name: String!
    ): GitHub_Topic
    "Lookup a user by login."
    user(
        #The user's login.
        login: String!
    ): GitHub_User
    "The currently authenticated user."
    viewer: GitHub_User!
}

"Autogenerated return type of AcceptTopicSuggestion"
type GitHub_AcceptTopicSuggestionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The accepted topic."
    topic: GitHub_Topic
}

"Autogenerated return type of AddAssigneesToAssignable"
type GitHub_AddAssigneesToAssignablePayload {
    "The item that was assigned."
    assignable: GitHub_Assignable
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of AddComment"
type GitHub_AddCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The edge from the subject's comment connection."
    commentEdge: GitHub_IssueCommentEdge
    "The subject"
    subject: GitHub_Node
    "The edge from the subject's timeline connection."
    timelineEdge: GitHub_IssueTimelineItemEdge
}

"Autogenerated return type of AddLabelsToLabelable"
type GitHub_AddLabelsToLabelablePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The item that was labeled."
    labelable: GitHub_Labelable
}

"Autogenerated return type of AddProjectCard"
type GitHub_AddProjectCardPayload {
    "The edge from the ProjectColumn's card connection."
    cardEdge: GitHub_ProjectCardEdge
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ProjectColumn"
    projectColumn: GitHub_ProjectColumn
}

"Autogenerated return type of AddProjectColumn"
type GitHub_AddProjectColumnPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The edge from the project's column connection."
    columnEdge: GitHub_ProjectColumnEdge
    "The project"
    project: GitHub_Project
}

"Autogenerated return type of AddPullRequestReviewComment"
type GitHub_AddPullRequestReviewCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The newly created comment."
    comment: GitHub_PullRequestReviewComment
    "The edge from the review's comment connection."
    commentEdge: GitHub_PullRequestReviewCommentEdge
}

"Autogenerated return type of AddPullRequestReview"
type GitHub_AddPullRequestReviewPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The newly created pull request review."
    pullRequestReview: GitHub_PullRequestReview
    "The edge from the pull request's review connection."
    reviewEdge: GitHub_PullRequestReviewEdge
}

"Autogenerated return type of AddReaction"
type GitHub_AddReactionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The reaction object."
    reaction: GitHub_Reaction
    "The reactable subject."
    subject: GitHub_Reactable
}

"Autogenerated return type of AddStar"
type GitHub_AddStarPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The starrable."
    starrable: GitHub_Starrable
}

"Represents a 'added_to_project' event on a given issue or pull request."
type GitHub_AddedToProjectEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"A GitHub App."
type GitHub_App implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    "The description of the app."
    description: String
    id: ID!
    "The hex color code, without the leading '#', for the logo background."
    logoBackgroundColor: String!
    "A URL pointing to the app's logo."
    logoUrl(
        #The size of the resulting image.
        size: Int
    ): GitHub_URI!
    "The name of the app."
    name: String!
    "A slug based on the name of the app for use in URLs."
    slug: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The URL to the app's homepage."
    url: GitHub_URI!
}

"An edge in a connection."
type GitHub_AppEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_App
}

"Represents an 'assigned' event on any assignable object."
type GitHub_AssignedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the assignable associated with the event."
    assignable: GitHub_Assignable!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the user who was assigned."
    user: GitHub_User
}

"Represents a 'base_ref_changed' event on a given issue or pull request."
type GitHub_BaseRefChangedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"Represents a 'base_ref_force_pushed' event on a given pull request."
type GitHub_BaseRefForcePushedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the after commit SHA for the 'base_ref_force_pushed' event."
    afterCommit: GitHub_Commit
    "Identifies the before commit SHA for the 'base_ref_force_pushed' event."
    beforeCommit: GitHub_Commit
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "Identifies the fully qualified ref name for the 'base_ref_force_pushed' event."
    ref: GitHub_Ref
}

"Represents a Git blame."
type GitHub_Blame {
    "The list of ranges from a Git blame."
    ranges: [GitHub_BlameRange!]!
}

"Represents a range of information from a Git blame."
type GitHub_BlameRange {
    """
    Identifies the recency of the change, from 1 (new) to 10 (old). This is
    calculated as a 2-quantile and determines the length of distance between the
    median age of all the changes in the file and the recency of the current
    range's change.
    """
    age: Int!
    "Identifies the line author"
    commit: GitHub_Commit!
    "The ending line for the range"
    endingLine: Int!
    "The starting line for the range"
    startingLine: Int!
}

"Represents a Git blob."
type GitHub_Blob implements GitHub_GitObject & GitHub_Node {
    "An abbreviated version of the Git object ID"
    abbreviatedOid: String!
    "Byte size of Blob object"
    byteSize: Int!
    "The HTTP path for this Git object"
    commitResourcePath: GitHub_URI!
    "The HTTP URL for this Git object"
    commitUrl: GitHub_URI!
    id: ID!
    "Indicates whether the Blob is binary or text"
    isBinary: Boolean!
    "Indicates whether the contents is truncated"
    isTruncated: Boolean!
    "The Git object ID"
    oid: GitHub_GitObjectID!
    "The Repository the Git object belongs to"
    repository: GitHub_Repository!
    "UTF8 text data or null if the Blob is binary"
    text: String
}

"A special type of user which takes actions on behalf of GitHub Apps."
type GitHub_Bot implements GitHub_Actor & GitHub_Node & GitHub_UniformResourceLocatable {
    "A URL pointing to the GitHub App's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "The username of the actor."
    login: String!
    "The HTTP path for this bot"
    resourcePath: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this bot"
    url: GitHub_URI!
}

"A branch protection rule."
type GitHub_BranchProtectionRule implements GitHub_Node {
    "A list of conflicts matching branches protection rule and other branch protection rules"
    branchProtectionRuleConflicts(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_BranchProtectionRuleConflictConnection!
    "The actor who created this branch protection rule."
    creator: GitHub_Actor
    "Identifies the primary key from the database."
    databaseId: Int
    "Will new commits pushed to matching branches dismiss pull request review approvals."
    dismissesStaleReviews: Boolean!
    id: ID!
    "Can admins overwrite branch protection."
    isAdminEnforced: Boolean!
    "Repository refs that are protected by this rule"
    matchingRefs(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_RefConnection!
    "Identifies the protection rule pattern."
    pattern: String!
    "A list push allowances for this branch protection rule."
    pushAllowances(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PushAllowanceConnection!
    "The repository associated with this branch protection rule."
    repository: GitHub_Repository
    "Number of approving reviews required to update matching branches."
    requiredApprovingReviewCount: Int
    "List of required status check contexts that must pass for commits to be accepted to matching branches."
    requiredStatusCheckContexts: [String]
    "Are approving reviews required to update matching branches."
    requiresApprovingReviews: Boolean!
    "Are commits required to be signed."
    requiresCommitSignatures: Boolean!
    "Are status checks required to update matching branches."
    requiresStatusChecks: Boolean!
    "Are branches required to be up to date before merging."
    requiresStrictStatusChecks: Boolean!
    "Is pushing to matching branches restricted."
    restrictsPushes: Boolean!
    "Is dismissal of pull request reviews restricted."
    restrictsReviewDismissals: Boolean!
    "A list review dismissal allowances for this branch protection rule."
    reviewDismissalAllowances(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ReviewDismissalAllowanceConnection!
}

"A conflict between two branch protection rules."
type GitHub_BranchProtectionRuleConflict {
    "Identifies the branch protection rule."
    branchProtectionRule: GitHub_BranchProtectionRule
    "Identifies the conflicting branch protection rule."
    conflictingBranchProtectionRule: GitHub_BranchProtectionRule
    "Identifies the branch ref that has conflicting rules"
    ref: GitHub_Ref
}

"The connection type for BranchProtectionRuleConflict."
type GitHub_BranchProtectionRuleConflictConnection {
    "A list of edges."
    edges: [GitHub_BranchProtectionRuleConflictEdge]
    "A list of nodes."
    nodes: [GitHub_BranchProtectionRuleConflict]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_BranchProtectionRuleConflictEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_BranchProtectionRuleConflict
}

"The connection type for BranchProtectionRule."
type GitHub_BranchProtectionRuleConnection {
    "A list of edges."
    edges: [GitHub_BranchProtectionRuleEdge]
    "A list of nodes."
    nodes: [GitHub_BranchProtectionRule]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_BranchProtectionRuleEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_BranchProtectionRule
}

"Autogenerated return type of ChangeUserStatus"
type GitHub_ChangeUserStatusPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Your updated status."
    status: GitHub_UserStatus
}

"Autogenerated return type of ClearLabelsFromLabelable"
type GitHub_ClearLabelsFromLabelablePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The item that was unlabeled."
    labelable: GitHub_Labelable
}

"Autogenerated return type of CloneProject"
type GitHub_CloneProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The id of the JobStatus for populating cloned fields."
    jobStatusId: String
    "The new cloned project."
    project: GitHub_Project
}

"Autogenerated return type of CloseIssue"
type GitHub_CloseIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The issue that was closed."
    issue: GitHub_Issue
}

"Autogenerated return type of ClosePullRequest"
type GitHub_ClosePullRequestPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The pull request that was closed."
    pullRequest: GitHub_PullRequest
}

"Represents a 'closed' event on any `Closable`."
type GitHub_ClosedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Object that was closed."
    closable: GitHub_Closable!
    "Object which triggered the creation of this event."
    closer: GitHub_Closer
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "The HTTP path for this closed event."
    resourcePath: GitHub_URI!
    "The HTTP URL for this closed event."
    url: GitHub_URI!
}

"The Code of Conduct for a repository"
type GitHub_CodeOfConduct implements GitHub_Node {
    "The body of the Code of Conduct"
    body: String
    id: ID!
    "The key for the Code of Conduct"
    key: String!
    "The formal name of the Code of Conduct"
    name: String!
    "The HTTP path for this Code of Conduct"
    resourcePath: GitHub_URI
    "The HTTP URL for this Code of Conduct"
    url: GitHub_URI
}

"Represents a 'comment_deleted' event on a given issue or pull request."
type GitHub_CommentDeletedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"Represents a Git commit."
type GitHub_Commit implements GitHub_GitObject & GitHub_Node & GitHub_Subscribable & GitHub_UniformResourceLocatable {
    "An abbreviated version of the Git object ID"
    abbreviatedOid: String!
    "The number of additions in this commit."
    additions: Int!
    "The pull requests associated with a commit"
    associatedPullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests.
        orderBy: GitHub_PullRequestOrder
    ): GitHub_PullRequestConnection
    "Authorship details of the commit."
    author: GitHub_GitActor
    "Check if the committer and the author match."
    authoredByCommitter: Boolean!
    "The datetime when this commit was authored."
    authoredDate: GitHub_DateTime!
    "Fetches `git blame` information."
    blame(
        #The file whose Git blame information you want.
        path: String!
    ): GitHub_Blame!
    "The number of changed files in this commit."
    changedFiles: Int!
    "Comments made on the commit."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitCommentConnection!
    "The HTTP path for this Git object"
    commitResourcePath: GitHub_URI!
    "The HTTP URL for this Git object"
    commitUrl: GitHub_URI!
    "The datetime when this commit was committed."
    committedDate: GitHub_DateTime!
    "Check if commited via GitHub web UI."
    committedViaWeb: Boolean!
    "Committership details of the commit."
    committer: GitHub_GitActor
    "The number of deletions in this commit."
    deletions: Int!
    "The deployments associated with a commit."
    deployments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Environments to list deployments for
        environments: [String!],
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for deployments returned from the connection.
        orderBy: GitHub_DeploymentOrder
    ): GitHub_DeploymentConnection
    "The linear commit history starting from (and including) this commit, in the same order as `git log`."
    history(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #If non-null, filters history to only show commits with matching authorship.
        author: GitHub_CommitAuthor,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #If non-null, filters history to only show commits touching files under this path.
        path: String,
        #Allows specifying a beginning time or date for fetching commits.
        since: GitHub_GitTimestamp,
        #Allows specifying an ending time or date for fetching commits.
        until: GitHub_GitTimestamp
    ): GitHub_CommitHistoryConnection!
    id: ID!
    "The Git commit message"
    message: String!
    "The Git commit message body"
    messageBody: String!
    "The commit message body rendered to HTML."
    messageBodyHTML: GitHub_HTML!
    "The Git commit message headline"
    messageHeadline: String!
    "The commit message headline rendered to HTML."
    messageHeadlineHTML: GitHub_HTML!
    "The Git object ID"
    oid: GitHub_GitObjectID!
    "The parents of a commit."
    parents(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitConnection!
    "The datetime when this commit was pushed."
    pushedDate: GitHub_DateTime
    "The Repository this commit belongs to"
    repository: GitHub_Repository!
    "The HTTP path for this commit"
    resourcePath: GitHub_URI!
    "Commit signing information, if present."
    signature: GitHub_GitSignature
    "Status information for this commit"
    status: GitHub_Status
    """
    Returns a URL to download a tarball archive for a repository.
    Note: For private repositories, these links are temporary and expire after five minutes.
    """
    tarballUrl: GitHub_URI!
    "Commit's root Tree"
    tree: GitHub_Tree!
    "The HTTP path for the tree of this commit"
    treeResourcePath: GitHub_URI!
    "The HTTP URL for the tree of this commit"
    treeUrl: GitHub_URI!
    "The HTTP URL for this commit"
    url: GitHub_URI!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
    """
    Returns a URL to download a zipball archive for a repository.
    Note: For private repositories, these links are temporary and expire after five minutes.
    """
    zipballUrl: GitHub_URI!
}

"Represents a comment on a given Commit."
type GitHub_CommitComment implements GitHub_Comment & GitHub_Deletable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Updatable & GitHub_UpdatableComment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "Identifies the comment body."
    body: String!
    "Identifies the comment body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body rendered to text."
    bodyText: String!
    "Identifies the commit associated with the comment, if the commit exists."
    commit: GitHub_Commit
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "Returns whether or not a comment has been minimized."
    isMinimized: Boolean!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "Returns why the comment was minimized."
    minimizedReason: String
    "Identifies the file path associated with the comment."
    path: String
    "Identifies the line position associated with the comment."
    position: Int
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path permalink for this commit comment."
    resourcePath: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL permalink for this commit comment."
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
    "Check if the current viewer can minimize this object."
    viewerCanMinimize: Boolean!
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"The connection type for CommitComment."
type GitHub_CommitCommentConnection {
    "A list of edges."
    edges: [GitHub_CommitCommentEdge]
    "A list of nodes."
    nodes: [GitHub_CommitComment]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CommitCommentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CommitComment
}

"A thread of comments on a commit."
type GitHub_CommitCommentThread implements GitHub_Node & GitHub_RepositoryNode {
    "The comments that exist in this thread."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitCommentConnection!
    "The commit the comments were made on."
    commit: GitHub_Commit!
    id: ID!
    "The file the comments were made on."
    path: String
    "The position in the diff for the commit that the comment was made on."
    position: Int
    "The repository associated with this node."
    repository: GitHub_Repository!
}

"The connection type for Commit."
type GitHub_CommitConnection {
    "A list of edges."
    edges: [GitHub_CommitEdge]
    "A list of nodes."
    nodes: [GitHub_Commit]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"This aggregates commits made by a user within one repository."
type GitHub_CommitContributionsByRepository {
    "The commit contributions, each representing a day."
    contributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for commit contributions returned from the connection.
        orderBy: GitHub_CommitContributionOrder
    ): GitHub_CreatedCommitContributionConnection!
    "The repository in which the commits were made."
    repository: GitHub_Repository!
    "The HTTP path for the user's commits to the repository in this time range."
    resourcePath: GitHub_URI!
    "The HTTP URL for the user's commits to the repository in this time range."
    url: GitHub_URI!
}

"An edge in a connection."
type GitHub_CommitEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Commit
}

"The connection type for Commit."
type GitHub_CommitHistoryConnection {
    "A list of edges."
    edges: [GitHub_CommitEdge]
    "A list of nodes."
    nodes: [GitHub_Commit]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"A content attachment"
type GitHub_ContentAttachment {
    "The body text of the content attachment. This parameter supports markdown."
    body: String!
    "The content reference that the content attachment is attached to."
    contentReference: GitHub_ContentReference!
    "Identifies the primary key from the database."
    databaseId: Int!
    id: ID!
    "The title of the content attachment."
    title: String!
}

"A content reference"
type GitHub_ContentReference {
    "Identifies the primary key from the database."
    databaseId: Int!
    id: ID!
    "The reference of the content reference."
    reference: String!
}

"A calendar of contributions made on GitHub by a user."
type GitHub_ContributionCalendar {
    "A list of hex color codes used in this calendar. The darker the color, the more contributions it represents."
    colors: [String!]!
    "Determine if the color set was chosen because it's currently Halloween."
    isHalloween: Boolean!
    "A list of the months of contributions in this calendar."
    months: [GitHub_ContributionCalendarMonth!]!
    "The count of total contributions in the calendar."
    totalContributions: Int!
    "A list of the weeks of contributions in this calendar."
    weeks: [GitHub_ContributionCalendarWeek!]!
}

"Represents a single day of contributions on GitHub by a user."
type GitHub_ContributionCalendarDay {
    "The hex color code that represents how many contributions were made on this day compared to others in the calendar."
    color: String!
    "How many contributions were made by the user on this day."
    contributionCount: Int!
    "The day this square represents."
    date: GitHub_Date!
    "A number representing which day of the week this square represents, e.g., 1 is Monday."
    weekday: Int!
}

"A month of contributions in a user's contribution graph."
type GitHub_ContributionCalendarMonth {
    "The date of the first day of this month."
    firstDay: GitHub_Date!
    "The name of the month."
    name: String!
    "How many weeks started in this month."
    totalWeeks: Int!
    "The year the month occurred in."
    year: Int!
}

"A week of contributions in a user's contribution graph."
type GitHub_ContributionCalendarWeek {
    "The days of contributions in this week."
    contributionDays: [GitHub_ContributionCalendarDay!]!
    "The date of the earliest square in this week."
    firstDay: GitHub_Date!
}

"A contributions collection aggregates contributions such as opened issues and commits created by a user."
type GitHub_ContributionsCollection {
    "Commit contributions made by the user, grouped by repository."
    commitContributionsByRepository(
        #How many repositories should be included.
        maxRepositories: Int = 25
    ): [GitHub_CommitContributionsByRepository!]!
    "A calendar of this user's contributions on GitHub."
    contributionCalendar: GitHub_ContributionCalendar!
    "The years the user has been making contributions with the most recent year first."
    contributionYears: [Int!]!
    "Determine if this collection's time span ends in the current month."
    doesEndInCurrentMonth: Boolean!
    """
    The date of the first restricted contribution the user made in this time
    period. Can only be non-null when the user has enabled private contribution counts.
    """
    earliestRestrictedContributionDate: GitHub_Date
    "The ending date and time of this collection."
    endedAt: GitHub_DateTime!
    """
    The first issue the user opened on GitHub. This will be null if that issue was
    opened outside the collection's time range and ignoreTimeRange is false. If
    the issue is not visible but the user has opted to show private contributions,
    a RestrictedContribution will be returned.
    """
    firstIssueContribution(
        """

        If true, the first issue will be returned even if it was opened outside of the collection's time range.

        **Upcoming Change on 2019-07-01 UTC**
        **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back
        **Reason:** ignore_time_range will be removed
        """
        ignoreTimeRange: Boolean = false
    ): GitHub_CreatedIssueOrRestrictedContribution
    """
    The first pull request the user opened on GitHub. This will be null if that
    pull request was opened outside the collection's time range and
    ignoreTimeRange is not true. If the pull request is not visible but the user
    has opted to show private contributions, a RestrictedContribution will be returned.
    """
    firstPullRequestContribution(
        """

        If true, the first pull request will be returned even if it was opened outside of the collection's time range.

        **Upcoming Change on 2019-07-01 UTC**
        **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back
        **Reason:** ignore_time_range will be removed
        """
        ignoreTimeRange: Boolean = false
    ): GitHub_CreatedPullRequestOrRestrictedContribution
    """
    The first repository the user created on GitHub. This will be null if that
    first repository was created outside the collection's time range and
    ignoreTimeRange is false. If the repository is not visible, then a
    RestrictedContribution is returned.
    """
    firstRepositoryContribution(
        """

        If true, the first repository will be returned even if it was opened outside of the collection's time range.

        **Upcoming Change on 2019-07-01 UTC**
        **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back
        **Reason:** ignore_time_range will be removed
        """
        ignoreTimeRange: Boolean = false
    ): GitHub_CreatedRepositoryOrRestrictedContribution
    "Does the user have any more activity in the timeline that occurred prior to the collection's time range?"
    hasActivityInThePast: Boolean!
    "Determine if there are any contributions in this collection."
    hasAnyContributions: Boolean!
    """
    Determine if the user made any contributions in this time frame whose details
    are not visible because they were made in a private repository. Can only be
    true if the user enabled private contribution counts.
    """
    hasAnyRestrictedContributions: Boolean!
    "Whether or not the collector's time span is all within the same day."
    isSingleDay: Boolean!
    "A list of issues the user opened."
    issueContributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Should the user's first issue ever be excluded from the result.
        excludeFirst: Boolean = false,
        #Should the user's most commented issue be excluded from the result.
        excludePopular: Boolean = false,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedIssueContributionConnection!
    "Issue contributions made by the user, grouped by repository."
    issueContributionsByRepository(
        #Should the user's first issue ever be excluded from the result.
        excludeFirst: Boolean = false,
        #Should the user's most commented issue be excluded from the result.
        excludePopular: Boolean = false,
        #How many repositories should be included.
        maxRepositories: Int = 25
    ): [GitHub_IssueContributionsByRepository!]!
    """
    When the user signed up for GitHub. This will be null if that sign up date
    falls outside the collection's time range and ignoreTimeRange is false.
    """
    joinedGitHubContribution(
        """

        If true, the contribution will be returned even if the user signed up outside of the collection's time range.

        **Upcoming Change on 2019-07-01 UTC**
        **Description:** `ignoreTimeRange` will be removed. Use a `ContributionsCollection` starting sufficiently far back
        **Reason:** ignore_time_range will be removed
        """
        ignoreTimeRange: Boolean = false
    ): GitHub_JoinedGitHubContribution
    """
    The date of the most recent restricted contribution the user made in this time
    period. Can only be non-null when the user has enabled private contribution counts.
    """
    latestRestrictedContributionDate: GitHub_Date
    """
    When this collection's time range does not include any activity from the user, use this
    to get a different collection from an earlier time range that does have activity.
    """
    mostRecentCollectionWithActivity: GitHub_ContributionsCollection
    """
    Returns a different contributions collection from an earlier time range than this one
    that does not have any contributions.
    """
    mostRecentCollectionWithoutActivity: GitHub_ContributionsCollection
    """
    The issue the user opened on GitHub that received the most comments in the specified
    time frame.
    """
    popularIssueContribution: GitHub_CreatedIssueContribution
    """
    The pull request the user opened on GitHub that received the most comments in the
    specified time frame.
    """
    popularPullRequestContribution: GitHub_CreatedPullRequestContribution
    "Pull request contributions made by the user."
    pullRequestContributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Should the user's first pull request ever be excluded from the result.
        excludeFirst: Boolean = false,
        #Should the user's most commented pull request be excluded from the result.
        excludePopular: Boolean = false,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedPullRequestContributionConnection!
    "Pull request contributions made by the user, grouped by repository."
    pullRequestContributionsByRepository(
        #Should the user's first pull request ever be excluded from the result.
        excludeFirst: Boolean = false,
        #Should the user's most commented pull request be excluded from the result.
        excludePopular: Boolean = false,
        #How many repositories should be included.
        maxRepositories: Int = 25
    ): [GitHub_PullRequestContributionsByRepository!]!
    "Pull request review contributions made by the user."
    pullRequestReviewContributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedPullRequestReviewContributionConnection!
    "Pull request review contributions made by the user, grouped by repository."
    pullRequestReviewContributionsByRepository(
        #How many repositories should be included.
        maxRepositories: Int = 25
    ): [GitHub_PullRequestReviewContributionsByRepository!]!
    "A list of repositories owned by the user that the user created in this time range."
    repositoryContributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Should the user's first repository ever be excluded from the result.
        excludeFirst: Boolean = false,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedRepositoryContributionConnection!
    """
    A count of contributions made by the user that the viewer cannot access. Only
    non-zero when the user has chosen to share their private contribution counts.
    """
    restrictedContributionsCount: Int!
    "The beginning date and time of this collection."
    startedAt: GitHub_DateTime!
    "How many commits were made by the user in this time span."
    totalCommitContributions: Int!
    "How many issues the user opened."
    totalIssueContributions(
        #Should the user's first issue ever be excluded from this count.
        excludeFirst: Boolean = false,
        #Should the user's most commented issue be excluded from this count.
        excludePopular: Boolean = false
    ): Int!
    "How many pull requests the user opened."
    totalPullRequestContributions(
        #Should the user's first pull request ever be excluded from this count.
        excludeFirst: Boolean = false,
        #Should the user's most commented pull request be excluded from this count.
        excludePopular: Boolean = false
    ): Int!
    "How many pull request reviews the user left."
    totalPullRequestReviewContributions: Int!
    "How many different repositories the user committed to."
    totalRepositoriesWithContributedCommits: Int!
    "How many different repositories the user opened issues in."
    totalRepositoriesWithContributedIssues(
        #Should the user's first issue ever be excluded from this count.
        excludeFirst: Boolean = false,
        #Should the user's most commented issue be excluded from this count.
        excludePopular: Boolean = false
    ): Int!
    "How many different repositories the user left pull request reviews in."
    totalRepositoriesWithContributedPullRequestReviews: Int!
    "How many different repositories the user opened pull requests in."
    totalRepositoriesWithContributedPullRequests(
        #Should the user's first pull request ever be excluded from this count.
        excludeFirst: Boolean = false,
        #Should the user's most commented pull request be excluded from this count.
        excludePopular: Boolean = false
    ): Int!
    "How many repositories the user created."
    totalRepositoryContributions(
        #Should the user's first repository ever be excluded from this count.
        excludeFirst: Boolean = false
    ): Int!
    "The user who made the contributions in this collection."
    user: GitHub_User!
}

"Autogenerated return type of ConvertProjectCardNoteToIssue"
type GitHub_ConvertProjectCardNoteToIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated ProjectCard."
    projectCard: GitHub_ProjectCard
}

"Represents a 'converted_note_to_issue' event on a given issue or pull request."
type GitHub_ConvertedNoteToIssueEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"Autogenerated return type of CreateBranchProtectionRule"
type GitHub_CreateBranchProtectionRulePayload {
    "The newly created BranchProtectionRule."
    branchProtectionRule: GitHub_BranchProtectionRule
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of CreateIssue"
type GitHub_CreateIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The new issue."
    issue: GitHub_Issue
}

"Autogenerated return type of CreateProject"
type GitHub_CreateProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The new project."
    project: GitHub_Project
}

"Autogenerated return type of CreatePullRequest"
type GitHub_CreatePullRequestPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The new pull request."
    pullRequest: GitHub_PullRequest
}

"Represents the contribution a user made by committing to a repository."
type GitHub_CreatedCommitContribution implements GitHub_Contribution {
    "How many commits were made on this day to this repository by the user."
    commitCount: Int!
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The repository the user made a commit in."
    repository: GitHub_Repository!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"The connection type for CreatedCommitContribution."
type GitHub_CreatedCommitContributionConnection {
    "A list of edges."
    edges: [GitHub_CreatedCommitContributionEdge]
    "A list of nodes."
    nodes: [GitHub_CreatedCommitContribution]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of commits across days and repositories in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CreatedCommitContributionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CreatedCommitContribution
}

"Represents the contribution a user made on GitHub by opening an issue."
type GitHub_CreatedIssueContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "The issue that was opened."
    issue: GitHub_Issue!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"The connection type for CreatedIssueContribution."
type GitHub_CreatedIssueContributionConnection {
    "A list of edges."
    edges: [GitHub_CreatedIssueContributionEdge]
    "A list of nodes."
    nodes: [GitHub_CreatedIssueContribution]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CreatedIssueContributionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CreatedIssueContribution
}

"Represents the contribution a user made on GitHub by opening a pull request."
type GitHub_CreatedPullRequestContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The pull request that was opened."
    pullRequest: GitHub_PullRequest!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"The connection type for CreatedPullRequestContribution."
type GitHub_CreatedPullRequestContributionConnection {
    "A list of edges."
    edges: [GitHub_CreatedPullRequestContributionEdge]
    "A list of nodes."
    nodes: [GitHub_CreatedPullRequestContribution]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CreatedPullRequestContributionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CreatedPullRequestContribution
}

"Represents the contribution a user made by leaving a review on a pull request."
type GitHub_CreatedPullRequestReviewContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The pull request the user reviewed."
    pullRequest: GitHub_PullRequest!
    "The review the user left on the pull request."
    pullRequestReview: GitHub_PullRequestReview!
    "The repository containing the pull request that the user reviewed."
    repository: GitHub_Repository!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"The connection type for CreatedPullRequestReviewContribution."
type GitHub_CreatedPullRequestReviewContributionConnection {
    "A list of edges."
    edges: [GitHub_CreatedPullRequestReviewContributionEdge]
    "A list of nodes."
    nodes: [GitHub_CreatedPullRequestReviewContribution]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CreatedPullRequestReviewContributionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CreatedPullRequestReviewContribution
}

"Represents the contribution a user made on GitHub by creating a repository."
type GitHub_CreatedRepositoryContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The repository that was created."
    repository: GitHub_Repository!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"The connection type for CreatedRepositoryContribution."
type GitHub_CreatedRepositoryContributionConnection {
    "A list of edges."
    edges: [GitHub_CreatedRepositoryContributionEdge]
    "A list of nodes."
    nodes: [GitHub_CreatedRepositoryContribution]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_CreatedRepositoryContributionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_CreatedRepositoryContribution
}

"Represents a mention made by one issue or pull request to another."
type GitHub_CrossReferencedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Reference originated in a different repository."
    isCrossRepository: Boolean!
    "Identifies when the reference was made."
    referencedAt: GitHub_DateTime!
    "The HTTP path for this pull request."
    resourcePath: GitHub_URI!
    "Issue or pull request that made the reference."
    source: GitHub_ReferencedSubject!
    "Issue or pull request to which the reference was made."
    target: GitHub_ReferencedSubject!
    "The HTTP URL for this pull request."
    url: GitHub_URI!
    "Checks if the target will be closed when the source is merged."
    willCloseTarget: Boolean!
}

"Autogenerated return type of DeclineTopicSuggestion"
type GitHub_DeclineTopicSuggestionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The declined topic."
    topic: GitHub_Topic
}

"Autogenerated return type of DeleteBranchProtectionRule"
type GitHub_DeleteBranchProtectionRulePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of DeleteIssueComment"
type GitHub_DeleteIssueCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of DeleteIssue"
type GitHub_DeleteIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The repository the issue belonged to"
    repository: GitHub_Repository
}

"Autogenerated return type of DeleteProjectCard"
type GitHub_DeleteProjectCardPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The column the deleted card was in."
    column: GitHub_ProjectColumn
    "The deleted card ID."
    deletedCardId: ID
}

"Autogenerated return type of DeleteProjectColumn"
type GitHub_DeleteProjectColumnPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The deleted column ID."
    deletedColumnId: ID
    "The project the deleted column was in."
    project: GitHub_Project
}

"Autogenerated return type of DeleteProject"
type GitHub_DeleteProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The repository or organization the project was removed from."
    owner: GitHub_ProjectOwner
}

"Autogenerated return type of DeletePullRequestReviewComment"
type GitHub_DeletePullRequestReviewCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The pull request review the deleted comment belonged to."
    pullRequestReview: GitHub_PullRequestReview
}

"Autogenerated return type of DeletePullRequestReview"
type GitHub_DeletePullRequestReviewPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The deleted pull request review."
    pullRequestReview: GitHub_PullRequestReview
}

"Represents a 'demilestoned' event on a given issue or pull request."
type GitHub_DemilestonedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the milestone title associated with the 'demilestoned' event."
    milestoneTitle: String!
    "Object referenced by event."
    subject: GitHub_MilestoneItem!
}

"A repository deploy key."
type GitHub_DeployKey implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "The deploy key."
    key: String!
    "Whether or not the deploy key is read only."
    readOnly: Boolean!
    "The deploy key title."
    title: String!
    "Whether or not the deploy key has been verified."
    verified: Boolean!
}

"The connection type for DeployKey."
type GitHub_DeployKeyConnection {
    "A list of edges."
    edges: [GitHub_DeployKeyEdge]
    "A list of nodes."
    nodes: [GitHub_DeployKey]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_DeployKeyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_DeployKey
}

"Represents a 'deployed' event on a given pull request."
type GitHub_DeployedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    "The deployment associated with the 'deployed' event."
    deployment: GitHub_Deployment!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "The ref associated with the 'deployed' event."
    ref: GitHub_Ref
}

"Represents triggered deployment instance."
type GitHub_Deployment implements GitHub_Node {
    "Identifies the commit sha of the deployment."
    commit: GitHub_Commit
    "Identifies the oid of the deployment commit, even if the commit has been deleted."
    commitOid: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the actor who triggered the deployment."
    creator: GitHub_Actor
    "Identifies the primary key from the database."
    databaseId: Int
    "The deployment description."
    description: String
    "The environment to which this deployment was made."
    environment: String
    id: ID!
    "The latest status of this deployment."
    latestStatus: GitHub_DeploymentStatus
    "Extra information that a deployment system might need."
    payload: String
    "Identifies the Ref of the deployment, if the deployment was created by ref."
    ref: GitHub_Ref
    "Identifies the repository associated with the deployment."
    repository: GitHub_Repository!
    "The current state of the deployment."
    state: GitHub_DeploymentState
    "A list of statuses associated with the deployment."
    statuses(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_DeploymentStatusConnection
    "The deployment task."
    task: String
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
}

"The connection type for Deployment."
type GitHub_DeploymentConnection {
    "A list of edges."
    edges: [GitHub_DeploymentEdge]
    "A list of nodes."
    nodes: [GitHub_Deployment]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_DeploymentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Deployment
}

"Represents a 'deployment_environment_changed' event on a given pull request."
type GitHub_DeploymentEnvironmentChangedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The deployment status that updated the deployment environment."
    deploymentStatus: GitHub_DeploymentStatus!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
}

"Describes the status of a given deployment attempt."
type GitHub_DeploymentStatus implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the actor who triggered the deployment."
    creator: GitHub_Actor
    "Identifies the deployment associated with status."
    deployment: GitHub_Deployment!
    "Identifies the description of the deployment."
    description: String
    "Identifies the environment URL of the deployment."
    environmentUrl: GitHub_URI
    id: ID!
    "Identifies the log URL of the deployment."
    logUrl: GitHub_URI
    "Identifies the current state of the deployment."
    state: GitHub_DeploymentStatusState!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
}

"The connection type for DeploymentStatus."
type GitHub_DeploymentStatusConnection {
    "A list of edges."
    edges: [GitHub_DeploymentStatusEdge]
    "A list of nodes."
    nodes: [GitHub_DeploymentStatus]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_DeploymentStatusEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_DeploymentStatus
}

"Autogenerated return type of DismissPullRequestReview"
type GitHub_DismissPullRequestReviewPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The dismissed pull request review."
    pullRequestReview: GitHub_PullRequestReview
}

"An external identity provisioned by SAML SSO or SCIM."
type GitHub_ExternalIdentity implements GitHub_Node {
    "The GUID for this identity"
    guid: String!
    id: ID!
    "Organization invitation for this SCIM-provisioned external identity"
    organizationInvitation: GitHub_OrganizationInvitation
    "SAML Identity attributes"
    samlIdentity: GitHub_ExternalIdentitySamlAttributes
    "SCIM Identity attributes"
    scimIdentity: GitHub_ExternalIdentityScimAttributes
    "User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member."
    user: GitHub_User
}

"The connection type for ExternalIdentity."
type GitHub_ExternalIdentityConnection {
    "A list of edges."
    edges: [GitHub_ExternalIdentityEdge]
    "A list of nodes."
    nodes: [GitHub_ExternalIdentity]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ExternalIdentityEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ExternalIdentity
}

"SAML attributes for the External Identity"
type GitHub_ExternalIdentitySamlAttributes {
    "The NameID of the SAML identity"
    nameId: String
}

"SCIM attributes for the External Identity"
type GitHub_ExternalIdentityScimAttributes {
    "The userName of the SCIM identity"
    username: String
}

"The connection type for User."
type GitHub_FollowerConnection {
    "A list of edges."
    edges: [GitHub_UserEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"The connection type for User."
type GitHub_FollowingConnection {
    "A list of edges."
    edges: [GitHub_UserEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"A Gist."
type GitHub_Gist implements GitHub_Node & GitHub_Starrable {
    "A list of comments associated with the gist"
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_GistCommentConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The gist description."
    description: String
    "The files in this gist."
    files(
        #The maximum number of files to return.
        limit: Int = 10
    ): [GitHub_GistFile]
    id: ID!
    "Identifies if the gist is a fork."
    isFork: Boolean!
    "Whether the gist is public or not."
    isPublic: Boolean!
    "The gist name."
    name: String!
    "The gist owner."
    owner: GitHub_RepositoryOwner
    "Identifies when the gist was last pushed to."
    pushedAt: GitHub_DateTime
    "A list of users who have starred this starrable."
    stargazers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_StarOrder
    ): GitHub_StargazerConnection!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "Returns a boolean indicating whether the viewing user has starred this starrable."
    viewerHasStarred: Boolean!
}

"Represents a comment on an Gist."
type GitHub_GistComment implements GitHub_Comment & GitHub_Deletable & GitHub_Node & GitHub_Updatable & GitHub_UpdatableComment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the gist."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "Identifies the comment body."
    body: String!
    "The comment body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body rendered to text."
    bodyText: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The actor who edited the comment."
    editor: GitHub_Actor
    "The associated gist."
    gist: GitHub_Gist!
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "Returns whether or not a comment has been minimized."
    isMinimized: Boolean!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "Returns why the comment was minimized."
    minimizedReason: String
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
    "Check if the current viewer can minimize this object."
    viewerCanMinimize: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"The connection type for GistComment."
type GitHub_GistCommentConnection {
    "A list of edges."
    edges: [GitHub_GistCommentEdge]
    "A list of nodes."
    nodes: [GitHub_GistComment]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_GistCommentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_GistComment
}

"The connection type for Gist."
type GitHub_GistConnection {
    "A list of edges."
    edges: [GitHub_GistEdge]
    "A list of nodes."
    nodes: [GitHub_Gist]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_GistEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Gist
}

"A file in a gist."
type GitHub_GistFile {
    "The file name encoded to remove characters that are invalid in URL paths."
    encodedName: String
    "The gist file encoding."
    encoding: String
    "The file extension from the file name."
    extension: String
    "Indicates if this file is an image."
    isImage: Boolean!
    "Whether the file's contents were truncated."
    isTruncated: Boolean!
    "The programming language this file is written in."
    language: GitHub_Language
    "The gist file name."
    name: String
    "The gist file size in bytes."
    size: Int
    "UTF8 text data or null if the file is binary"
    text(
        #Optionally truncate the returned file to this length.
        truncate: Int
    ): String
}

"Represents an actor in a Git commit (ie. an author or committer)."
type GitHub_GitActor {
    "A URL pointing to the author's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "The timestamp of the Git action (authoring or committing)."
    date: GitHub_GitTimestamp
    "The email in the Git commit."
    email: String
    "The name in the Git commit."
    name: String
    "The GitHub user corresponding to the email field. Null if no such user exists."
    user: GitHub_User
}

"Represents information about the GitHub instance."
type GitHub_GitHubMetadata {
    "Returns a String that's a SHA of `github-services`"
    gitHubServicesSha: GitHub_GitObjectID!
    "IP addresses that users connect to for git operations"
    gitIpAddresses: [String!]
    "IP addresses that service hooks are sent from"
    hookIpAddresses: [String!]
    "IP addresses that the importer connects from"
    importerIpAddresses: [String!]
    "Whether or not users are verified"
    isPasswordAuthenticationVerifiable: Boolean!
    "IP addresses for GitHub Pages' A records"
    pagesIpAddresses: [String!]
}

"Represents a GPG signature on a Commit or Tag."
type GitHub_GpgSignature implements GitHub_GitSignature {
    "Email used to sign this object."
    email: String!
    "True if the signature is valid and verified by GitHub."
    isValid: Boolean!
    "Hex-encoded ID of the key that signed this object."
    keyId: String
    "Payload for GPG signing object. Raw ODB object without the signature header."
    payload: String!
    "ASCII-armored signature header from object."
    signature: String!
    "GitHub user corresponding to the email signing this commit."
    signer: GitHub_User
    """
    The state of this signature. `VALID` if signature is valid and verified by
    GitHub, otherwise represents reason why signature is considered invalid.
    """
    state: GitHub_GitSignatureState!
    "True if the signature was made with GitHub's signing key."
    wasSignedByGitHub: Boolean!
}

"Represents a 'head_ref_deleted' event on a given pull request."
type GitHub_HeadRefDeletedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the Ref associated with the `head_ref_deleted` event."
    headRef: GitHub_Ref
    "Identifies the name of the Ref associated with the `head_ref_deleted` event."
    headRefName: String!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
}

"Represents a 'head_ref_force_pushed' event on a given pull request."
type GitHub_HeadRefForcePushedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the after commit SHA for the 'head_ref_force_pushed' event."
    afterCommit: GitHub_Commit
    "Identifies the before commit SHA for the 'head_ref_force_pushed' event."
    beforeCommit: GitHub_Commit
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "Identifies the fully qualified ref name for the 'head_ref_force_pushed' event."
    ref: GitHub_Ref
}

"Represents a 'head_ref_restored' event on a given pull request."
type GitHub_HeadRefRestoredEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
}

"An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."
type GitHub_Issue implements GitHub_Assignable & GitHub_Closable & GitHub_Comment & GitHub_Labelable & GitHub_Lockable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Subscribable & GitHub_UniformResourceLocatable & GitHub_Updatable & GitHub_UpdatableComment {
    "Reason that the conversation was locked."
    activeLockReason: GitHub_LockReason
    "A list of Users assigned to this object."
    assignees(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "Identifies the body of the issue."
    body: String!
    "Identifies the body of the issue rendered to HTML."
    bodyHTML: GitHub_HTML!
    "Identifies the body of the issue rendered to text."
    bodyText: String!
    "`true` if the object is closed (definition of closed may depend on type)"
    closed: Boolean!
    "Identifies the date and time when the object was closed."
    closedAt: GitHub_DateTime
    "A list of comments associated with the Issue."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_IssueCommentConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "A list of labels associated with the object."
    labels(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_LabelConnection
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "`true` if the object is locked"
    locked: Boolean!
    "Identifies the milestone associated with the issue."
    milestone: GitHub_Milestone
    "Identifies the issue number."
    number: Int!
    "A list of Users that are participating in the Issue conversation."
    participants(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "List of project cards associated with this issue."
    projectCards(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #A list of archived states to filter the cards by
        archivedStates: [GitHub_ProjectCardArchivedState],
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ProjectCardConnection!
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path for this issue"
    resourcePath: GitHub_URI!
    "Identifies the state of the issue."
    state: GitHub_IssueState!
    "A list of events, comments, commits, etc. associated with the issue."
    timeline(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows filtering timeline events by a `since` timestamp.
        since: GitHub_DateTime
    ): GitHub_IssueTimelineConnection!
    "A list of events, comments, commits, etc. associated with the issue."
    timelineItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Filter timeline items by type.
        itemTypes: [GitHub_IssueTimelineItemsItemType!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter timeline items by a `since` timestamp.
        since: GitHub_DateTime,
        #Skips the first _n_ elements in the list.
        skip: Int
    ): GitHub_IssueTimelineItemsConnection!
    "Identifies the issue title."
    title: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this issue"
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
}

"Represents a comment on an Issue."
type GitHub_IssueComment implements GitHub_Comment & GitHub_Deletable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Updatable & GitHub_UpdatableComment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "The body as Markdown."
    body: String!
    "The body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body rendered to text."
    bodyText: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "Returns whether or not a comment has been minimized."
    isMinimized: Boolean!
    "Identifies the issue associated with the comment."
    issue: GitHub_Issue!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "Returns why the comment was minimized."
    minimizedReason: String
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    """
    Returns the pull request associated with the comment, if this comment was made on a
    pull request.
    """
    pullRequest: GitHub_PullRequest
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path for this issue comment"
    resourcePath: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this issue comment"
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
    "Check if the current viewer can minimize this object."
    viewerCanMinimize: Boolean!
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"The connection type for IssueComment."
type GitHub_IssueCommentConnection {
    "A list of edges."
    edges: [GitHub_IssueCommentEdge]
    "A list of nodes."
    nodes: [GitHub_IssueComment]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_IssueCommentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_IssueComment
}

"The connection type for Issue."
type GitHub_IssueConnection {
    "A list of edges."
    edges: [GitHub_IssueEdge]
    "A list of nodes."
    nodes: [GitHub_Issue]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"This aggregates issues opened by a user within one repository."
type GitHub_IssueContributionsByRepository {
    "The issue contributions."
    contributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedIssueContributionConnection!
    "The repository in which the issues were opened."
    repository: GitHub_Repository!
}

"An edge in a connection."
type GitHub_IssueEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Issue
}

"The connection type for IssueTimelineItem."
type GitHub_IssueTimelineConnection {
    "A list of edges."
    edges: [GitHub_IssueTimelineItemEdge]
    "A list of nodes."
    nodes: [GitHub_IssueTimelineItem]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_IssueTimelineItemEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_IssueTimelineItem
}

"The connection type for IssueTimelineItems."
type GitHub_IssueTimelineItemsConnection {
    "A list of edges."
    edges: [GitHub_IssueTimelineItemsEdge]
    "Identifies the count of items after applying `before` and `after` filters."
    filteredCount: Int!
    "A list of nodes."
    nodes: [GitHub_IssueTimelineItems]
    "Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing."
    pageCount: Int!
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
    "Identifies the date and time when the timeline was last updated."
    updatedAt: GitHub_DateTime!
}

"An edge in a connection."
type GitHub_IssueTimelineItemsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_IssueTimelineItems
}

"Represents a user signing up for a GitHub account."
type GitHub_JoinedGitHubContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"A label for categorizing Issues or Milestones with a given Repository."
type GitHub_Label implements GitHub_Node {
    "Identifies the label color."
    color: String!
    "Identifies the date and time when the label was created."
    createdAt: GitHub_DateTime
    "A brief description of this label."
    description: String
    id: ID!
    "Indicates whether or not this is a default label."
    isDefault: Boolean!
    "A list of issues associated with this label."
    issues(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Filtering options for issues returned from the connection.
        filterBy: GitHub_IssueFilters,
        #Returns the first _n_ elements from the list.
        first: Int,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for issues returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the issues by.
        states: [GitHub_IssueState!]
    ): GitHub_IssueConnection!
    "Identifies the label name."
    name: String!
    "A list of pull requests associated with this label."
    pullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #The base ref name to filter the pull requests by.
        baseRefName: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #The head ref name to filter the pull requests by.
        headRefName: String,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the pull requests by.
        states: [GitHub_PullRequestState!]
    ): GitHub_PullRequestConnection!
    "The repository associated with this label."
    repository: GitHub_Repository!
    "The HTTP path for this label."
    resourcePath: GitHub_URI!
    "Identifies the date and time when the label was last updated."
    updatedAt: GitHub_DateTime
    "The HTTP URL for this label."
    url: GitHub_URI!
}

"The connection type for Label."
type GitHub_LabelConnection {
    "A list of edges."
    edges: [GitHub_LabelEdge]
    "A list of nodes."
    nodes: [GitHub_Label]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_LabelEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Label
}

"Represents a 'labeled' event on a given issue or pull request."
type GitHub_LabeledEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the label associated with the 'labeled' event."
    label: GitHub_Label!
    "Identifies the `Labelable` associated with the event."
    labelable: GitHub_Labelable!
}

"Represents a given language found in repositories."
type GitHub_Language implements GitHub_Node {
    "The color defined for the current language."
    color: String
    id: ID!
    "The name of the current language."
    name: String!
}

"A list of languages associated with the parent."
type GitHub_LanguageConnection {
    "A list of edges."
    edges: [GitHub_LanguageEdge]
    "A list of nodes."
    nodes: [GitHub_Language]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
    "The total size in bytes of files written in that language."
    totalSize: Int!
}

"Represents the language of a repository."
type GitHub_LanguageEdge {
    cursor: String!
    node: GitHub_Language!
    "The number of bytes of code written in the language."
    size: Int!
}

"A repository's open source license"
type GitHub_License implements GitHub_Node {
    "The full text of the license"
    body: String!
    "The conditions set by the license"
    conditions: [GitHub_LicenseRule]!
    "A human-readable description of the license"
    description: String
    "Whether the license should be featured"
    featured: Boolean!
    "Whether the license should be displayed in license pickers"
    hidden: Boolean!
    id: ID!
    "Instructions on how to implement the license"
    implementation: String
    "The lowercased SPDX ID of the license"
    key: String!
    "The limitations set by the license"
    limitations: [GitHub_LicenseRule]!
    "The license full name specified by <https://spdx.org/licenses>"
    name: String!
    "Customary short name if applicable (e.g, GPLv3)"
    nickname: String
    "The permissions set by the license"
    permissions: [GitHub_LicenseRule]!
    "Whether the license is a pseudo-license placeholder (e.g., other, no-license)"
    pseudoLicense: Boolean!
    "Short identifier specified by <https://spdx.org/licenses>"
    spdxId: String
    "URL to the license on <https://choosealicense.com>"
    url: GitHub_URI
}

"Describes a License's conditions, permissions, and limitations"
type GitHub_LicenseRule {
    "A description of the rule"
    description: String!
    "The machine-readable rule key"
    key: String!
    "The human-readable rule label"
    label: String!
}

"Autogenerated return type of LockLockable"
type GitHub_LockLockablePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The item that was locked."
    lockedRecord: GitHub_Lockable
}

"Represents a 'locked' event on a given issue or pull request."
type GitHub_LockedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Reason that the conversation was locked (optional)."
    lockReason: GitHub_LockReason
    "Object that was locked."
    lockable: GitHub_Lockable!
}

"A placeholder user for attribution of imported data on GitHub."
type GitHub_Mannequin implements GitHub_Actor & GitHub_Node & GitHub_UniformResourceLocatable {
    "A URL pointing to the GitHub App's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "The username of the actor."
    login: String!
    "The HTML path to this resource."
    resourcePath: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The URL to this resource."
    url: GitHub_URI!
}

"A public description of a Marketplace category."
type GitHub_MarketplaceCategory implements GitHub_Node {
    "The category's description."
    description: String
    "The technical description of how apps listed in this category work with GitHub."
    howItWorks: String
    id: ID!
    "The category's name."
    name: String!
    "How many Marketplace listings have this as their primary category."
    primaryListingCount: Int!
    "The HTTP path for this Marketplace category."
    resourcePath: GitHub_URI!
    "How many Marketplace listings have this as their secondary category."
    secondaryListingCount: Int!
    "The short name of the category used in its URL."
    slug: String!
    "The HTTP URL for this Marketplace category."
    url: GitHub_URI!
}

"A listing in the GitHub integration marketplace."
type GitHub_MarketplaceListing implements GitHub_Node {
    "The GitHub App this listing represents."
    app: GitHub_App
    "URL to the listing owner's company site."
    companyUrl: GitHub_URI
    "The HTTP path for configuring access to the listing's integration or OAuth app"
    configurationResourcePath: GitHub_URI!
    "The HTTP URL for configuring access to the listing's integration or OAuth app"
    configurationUrl: GitHub_URI!
    "URL to the listing's documentation."
    documentationUrl: GitHub_URI
    "The listing's detailed description."
    extendedDescription: String
    "The listing's detailed description rendered to HTML."
    extendedDescriptionHTML: GitHub_HTML!
    "The listing's introductory description."
    fullDescription: String!
    "The listing's introductory description rendered to HTML."
    fullDescriptionHTML: GitHub_HTML!
    "Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace."
    hasApprovalBeenRequested: Boolean! @deprecated(reason : "`hasApprovalBeenRequested` will be removed. Use `isVerificationPendingFromDraft` instead. Removal on 2019-10-01 UTC.")
    "Does this listing have any plans with a free trial?"
    hasPublishedFreeTrialPlans: Boolean!
    "Does this listing have a terms of service link?"
    hasTermsOfService: Boolean!
    "A technical description of how this app works with GitHub."
    howItWorks: String
    "The listing's technical description rendered to HTML."
    howItWorksHTML: GitHub_HTML!
    id: ID!
    "URL to install the product to the viewer's account or organization."
    installationUrl: GitHub_URI
    "Whether this listing's app has been installed for the current viewer"
    installedForViewer: Boolean!
    "Whether this listing has been approved for display in the Marketplace."
    isApproved: Boolean! @deprecated(reason : "`isApproved` will be removed. Use `isPublic` instead. Removal on 2019-10-01 UTC.")
    "Whether this listing has been removed from the Marketplace."
    isArchived: Boolean!
    "Whether this listing has been removed from the Marketplace."
    isDelisted: Boolean! @deprecated(reason : "`isDelisted` will be removed. Use `isArchived` instead. Removal on 2019-10-01 UTC.")
    """
    Whether this listing is still an editable draft that has not been submitted
    for review and is not publicly visible in the Marketplace.
    """
    isDraft: Boolean!
    "Whether the product this listing represents is available as part of a paid plan."
    isPaid: Boolean!
    "Whether this listing has been approved for display in the Marketplace."
    isPublic: Boolean!
    "Whether this listing has been rejected by GitHub for display in the Marketplace."
    isRejected: Boolean!
    "Whether this listing has been approved for unverified display in the Marketplace."
    isUnverified: Boolean!
    "Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace."
    isUnverifiedPending: Boolean!
    "Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace."
    isVerificationPendingFromDraft: Boolean!
    "Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace."
    isVerificationPendingFromUnverified: Boolean!
    "Whether this listing has been approved for verified display in the Marketplace."
    isVerified: Boolean!
    "The hex color code, without the leading '#', for the logo background."
    logoBackgroundColor: String!
    "URL for the listing's logo image."
    logoUrl(
        #The size in pixels of the resulting square image.
        size: Int = 400
    ): GitHub_URI
    "The listing's full name."
    name: String!
    "The listing's very short description without a trailing period or ampersands."
    normalizedShortDescription: String!
    "URL to the listing's detailed pricing."
    pricingUrl: GitHub_URI
    "The category that best describes the listing."
    primaryCategory: GitHub_MarketplaceCategory!
    "URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL."
    privacyPolicyUrl: GitHub_URI!
    "The HTTP path for the Marketplace listing."
    resourcePath: GitHub_URI!
    "The URLs for the listing's screenshots."
    screenshotUrls: [String]!
    "An alternate category that describes the listing."
    secondaryCategory: GitHub_MarketplaceCategory
    "The listing's very short description."
    shortDescription: String!
    "The short name of the listing used in its URL."
    slug: String!
    "URL to the listing's status page."
    statusUrl: GitHub_URI
    "An email address for support for this listing's app."
    supportEmail: String
    """
    Either a URL or an email address for support for this listing's app, may
    return an empty string for listings that do not require a support URL.
    """
    supportUrl: GitHub_URI!
    "URL to the listing's terms of service."
    termsOfServiceUrl: GitHub_URI
    "The HTTP URL for the Marketplace listing."
    url: GitHub_URI!
    "Can the current viewer add plans for this Marketplace listing."
    viewerCanAddPlans: Boolean!
    "Can the current viewer approve this Marketplace listing."
    viewerCanApprove: Boolean!
    "Can the current viewer delist this Marketplace listing."
    viewerCanDelist: Boolean!
    "Can the current viewer edit this Marketplace listing."
    viewerCanEdit: Boolean!
    """
    Can the current viewer edit the primary and secondary category of this
    Marketplace listing.
    """
    viewerCanEditCategories: Boolean!
    "Can the current viewer edit the plans for this Marketplace listing."
    viewerCanEditPlans: Boolean!
    """
    Can the current viewer return this Marketplace listing to draft state
    so it becomes editable again.
    """
    viewerCanRedraft: Boolean!
    """
    Can the current viewer reject this Marketplace listing by returning it to
    an editable draft state or rejecting it entirely.
    """
    viewerCanReject: Boolean!
    """
    Can the current viewer request this listing be reviewed for display in
    the Marketplace as verified.
    """
    viewerCanRequestApproval: Boolean!
    "Indicates whether the current user has an active subscription to this Marketplace listing."
    viewerHasPurchased: Boolean!
    """
    Indicates if the current user has purchased a subscription to this Marketplace listing
    for all of the organizations the user owns.
    """
    viewerHasPurchasedForAllOrganizations: Boolean!
    "Does the current viewer role allow them to administer this Marketplace listing."
    viewerIsListingAdmin: Boolean!
}

"Look up Marketplace Listings"
type GitHub_MarketplaceListingConnection {
    "A list of edges."
    edges: [GitHub_MarketplaceListingEdge]
    "A list of nodes."
    nodes: [GitHub_MarketplaceListing]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_MarketplaceListingEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_MarketplaceListing
}

"Represents a 'mentioned' event on a given issue or pull request."
type GitHub_MentionedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"Autogenerated return type of MergePullRequest"
type GitHub_MergePullRequestPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The pull request that was merged."
    pullRequest: GitHub_PullRequest
}

"Represents a 'merged' event on a given pull request."
type GitHub_MergedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the commit associated with the `merge` event."
    commit: GitHub_Commit
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the Ref associated with the `merge` event."
    mergeRef: GitHub_Ref
    "Identifies the name of the Ref associated with the `merge` event."
    mergeRefName: String!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "The HTTP path for this merged event."
    resourcePath: GitHub_URI!
    "The HTTP URL for this merged event."
    url: GitHub_URI!
}

"Represents a Milestone object on a given repository."
type GitHub_Milestone implements GitHub_Closable & GitHub_Node & GitHub_UniformResourceLocatable {
    "`true` if the object is closed (definition of closed may depend on type)"
    closed: Boolean!
    "Identifies the date and time when the object was closed."
    closedAt: GitHub_DateTime
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the actor who created the milestone."
    creator: GitHub_Actor
    "Identifies the description of the milestone."
    description: String
    "Identifies the due date of the milestone."
    dueOn: GitHub_DateTime
    id: ID!
    "A list of issues associated with the milestone."
    issues(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Filtering options for issues returned from the connection.
        filterBy: GitHub_IssueFilters,
        #Returns the first _n_ elements from the list.
        first: Int,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for issues returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the issues by.
        states: [GitHub_IssueState!]
    ): GitHub_IssueConnection!
    "Identifies the number of the milestone."
    number: Int!
    "A list of pull requests associated with the milestone."
    pullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #The base ref name to filter the pull requests by.
        baseRefName: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #The head ref name to filter the pull requests by.
        headRefName: String,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the pull requests by.
        states: [GitHub_PullRequestState!]
    ): GitHub_PullRequestConnection!
    "The repository associated with this milestone."
    repository: GitHub_Repository!
    "The HTTP path for this milestone"
    resourcePath: GitHub_URI!
    "Identifies the state of the milestone."
    state: GitHub_MilestoneState!
    "Identifies the title of the milestone."
    title: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this milestone"
    url: GitHub_URI!
}

"The connection type for Milestone."
type GitHub_MilestoneConnection {
    "A list of edges."
    edges: [GitHub_MilestoneEdge]
    "A list of nodes."
    nodes: [GitHub_Milestone]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_MilestoneEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Milestone
}

"Represents a 'milestoned' event on a given issue or pull request."
type GitHub_MilestonedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the milestone title associated with the 'milestoned' event."
    milestoneTitle: String!
    "Object referenced by event."
    subject: GitHub_MilestoneItem!
}

"Autogenerated return type of MoveProjectCard"
type GitHub_MoveProjectCardPayload {
    "The new edge of the moved card."
    cardEdge: GitHub_ProjectCardEdge
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of MoveProjectColumn"
type GitHub_MoveProjectColumnPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The new edge of the moved column."
    columnEdge: GitHub_ProjectColumnEdge
}

"Represents a 'moved_columns_in_project' event on a given issue or pull request."
type GitHub_MovedColumnsInProjectEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"An account on GitHub, with one or more owners, that has repositories, members and teams."
type GitHub_Organization implements GitHub_Actor & GitHub_MemberStatusable & GitHub_Node & GitHub_ProfileOwner & GitHub_ProjectOwner & GitHub_RegistryPackageOwner & GitHub_RegistryPackageSearch & GitHub_RepositoryOwner & GitHub_UniformResourceLocatable {
    "Determine if this repository owner has any items that can be pinned to their profile."
    anyPinnableItems(
        #Filter to only a particular kind of pinnable item.
        type: GitHub_PinnableItemType
    ): Boolean!
    "A URL pointing to the organization's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "Identifies the primary key from the database."
    databaseId: Int
    "The organization's public profile description."
    description: String
    "The organization's public email."
    email: String
    id: ID!
    "Whether the organization has verified its profile email and website."
    isVerified: Boolean!
    """
    Showcases a selection of repositories and gists that the profile owner has
    either curated or that have been selected automatically based on popularity.
    """
    itemShowcase: GitHub_ProfileItemShowcase!
    "The organization's public profile location."
    location: String
    "The organization's login name."
    login: String!
    "Get the status messages members of this entity have set that are either public or visible only to the organization."
    memberStatuses(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for user statuses returned from the connection.
        orderBy: GitHub_UserStatusOrder
    ): GitHub_UserStatusConnection!
    "A list of users who are members of this organization."
    membersWithRole(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_OrganizationMemberConnection!
    "The organization's public profile name."
    name: String
    "The HTTP path creating a new team"
    newTeamResourcePath: GitHub_URI!
    "The HTTP URL creating a new team"
    newTeamUrl: GitHub_URI!
    "The billing email for the organization."
    organizationBillingEmail: String
    "A list of users who have been invited to join this organization."
    pendingMembers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "A list of repositories and gists this profile owner can pin to their profile."
    pinnableItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinnable items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "A list of repositories and gists this profile owner has pinned to their profile"
    pinnedItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinned items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "Returns how many more items this profile owner can pin to their profile."
    pinnedItemsRemaining: Int!
    "A list of repositories this user has pinned to their profile"
    pinnedRepositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection! @deprecated(reason : "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.")
    "Find project by number."
    project(
        #The project number to find.
        number: Int!
    ): GitHub_Project
    "A list of projects under the owner."
    projects(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for projects returned from the connection
        orderBy: GitHub_ProjectOrder,
        #Query to search projects by, currently only searching by name.
        search: String,
        #A list of states to filter the projects by.
        states: [GitHub_ProjectState!]
    ): GitHub_ProjectConnection!
    "The HTTP path listing organization's projects"
    projectsResourcePath: GitHub_URI!
    "The HTTP URL listing organization's projects"
    projectsUrl: GitHub_URI!
    "A list of repositories that the user owns."
    repositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they are forks of another repository
        isFork: Boolean,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "Find Repository."
    repository(
        #Name of Repository to find.
        name: String!
    ): GitHub_Repository
    """
    When true the organization requires all members, billing managers, and outside
    collaborators to enable two-factor authentication.
    """
    requiresTwoFactorAuthentication: Boolean
    "The HTTP path for this organization."
    resourcePath: GitHub_URI!
    "The Organization's SAML identity providers"
    samlIdentityProvider: GitHub_OrganizationIdentityProvider
    "Find an organization's team by its slug."
    team(
        #The name or slug of the team to find.
        slug: String!
    ): GitHub_Team
    "A list of teams in this organization."
    teams(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #If true, filters teams that are mapped to an LDAP Group (Enterprise only)
        ldapMapped: Boolean,
        #Ordering options for teams returned from the connection
        orderBy: GitHub_TeamOrder,
        #If non-null, filters teams according to privacy
        privacy: GitHub_TeamPrivacy,
        #If non-null, filters teams with query on team name and team slug
        query: String,
        #If non-null, filters teams according to whether the viewer is an admin or member on team
        role: GitHub_TeamRole,
        #If true, restrict to only root teams
        rootTeamsOnly: Boolean = false,
        #User logins to filter by
        userLogins: [String!]
    ): GitHub_TeamConnection!
    "The HTTP path listing organization's teams"
    teamsResourcePath: GitHub_URI!
    "The HTTP URL listing organization's teams"
    teamsUrl: GitHub_URI!
    "The HTTP URL for this organization."
    url: GitHub_URI!
    "Organization is adminable by the viewer."
    viewerCanAdminister: Boolean!
    "Can the viewer pin repositories and gists to the profile?"
    viewerCanChangePinnedItems: Boolean!
    "Can the current viewer create new projects on this owner."
    viewerCanCreateProjects: Boolean!
    "Viewer can create repositories on this organization"
    viewerCanCreateRepositories: Boolean!
    "Viewer can create teams on this organization."
    viewerCanCreateTeams: Boolean!
    "Viewer is an active member of this organization."
    viewerIsAMember: Boolean!
    "The organization's public profile URL."
    websiteUrl: GitHub_URI
}

"The connection type for Organization."
type GitHub_OrganizationConnection {
    "A list of edges."
    edges: [GitHub_OrganizationEdge]
    "A list of nodes."
    nodes: [GitHub_Organization]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_OrganizationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Organization
}

"An Identity Provider configured to provision SAML and SCIM identities for Organizations"
type GitHub_OrganizationIdentityProvider implements GitHub_Node {
    "The digest algorithm used to sign SAML requests for the Identity Provider."
    digestMethod: GitHub_URI
    "External Identities provisioned by this Identity Provider"
    externalIdentities(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ExternalIdentityConnection!
    id: ID!
    "The x509 certificate used by the Identity Provder to sign assertions and responses."
    idpCertificate: GitHub_X509Certificate
    "The Issuer Entity ID for the SAML Identity Provider"
    issuer: String
    "Organization this Identity Provider belongs to"
    organization: GitHub_Organization
    "The signature algorithm used to sign SAML requests for the Identity Provider."
    signatureMethod: GitHub_URI
    "The URL endpoint for the Identity Provider's SAML SSO."
    ssoUrl: GitHub_URI
}

"An Invitation for a user to an organization."
type GitHub_OrganizationInvitation implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The email address of the user invited to the organization."
    email: String
    id: ID!
    "The type of invitation that was sent (e.g. email, user)."
    invitationType: GitHub_OrganizationInvitationType!
    "The user who was invited to the organization."
    invitee: GitHub_User
    "The user who created the invitation."
    inviter: GitHub_User!
    "The organization the invite is for"
    organization: GitHub_Organization!
    "The user's pending role in the organization (e.g. member, owner)."
    role: GitHub_OrganizationInvitationRole!
}

"The connection type for OrganizationInvitation."
type GitHub_OrganizationInvitationConnection {
    "A list of edges."
    edges: [GitHub_OrganizationInvitationEdge]
    "A list of nodes."
    nodes: [GitHub_OrganizationInvitation]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_OrganizationInvitationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_OrganizationInvitation
}

"The connection type for User."
type GitHub_OrganizationMemberConnection {
    "A list of edges."
    edges: [GitHub_OrganizationMemberEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a user within an organization."
type GitHub_OrganizationMemberEdge {
    "A cursor for use in pagination."
    cursor: String!
    "Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer."
    hasTwoFactorEnabled: Boolean
    "The item at the end of the edge."
    node: GitHub_User
    "The role this user has in the organization."
    role: GitHub_OrganizationMemberRole
}

"Information about pagination in a connection."
type GitHub_PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A level of permission and source for a user's access to a repository."
type GitHub_PermissionSource {
    "The organization the repository belongs to."
    organization: GitHub_Organization!
    "The level of access this source has granted to the user."
    permission: GitHub_DefaultRepositoryPermissionField!
    "The source of this permission."
    source: GitHub_PermissionGranter!
}

"The connection type for PinnableItem."
type GitHub_PinnableItemConnection {
    "A list of edges."
    edges: [GitHub_PinnableItemEdge]
    "A list of nodes."
    nodes: [GitHub_PinnableItem]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PinnableItemEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PinnableItem
}

"Represents a 'pinned' event on a given issue or pull request."
type GitHub_PinnedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the issue associated with the event."
    issue: GitHub_Issue!
}

"""
A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own.
"""
type GitHub_ProfileItemShowcase {
    "Whether or not the owner has pinned any repositories or gists."
    hasPinnedItems: Boolean!
    """
    The repositories and gists in the showcase. If the profile owner has any
    pinned items, those will be returned. Otherwise, the profile owner's popular
    repositories will be returned.
    """
    items(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PinnableItemConnection!
}

"Projects manage issues, pull requests and notes within a project owner."
type GitHub_Project implements GitHub_Closable & GitHub_Node & GitHub_Updatable {
    "The project's description body."
    body: String
    "The projects description body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "`true` if the object is closed (definition of closed may depend on type)"
    closed: Boolean!
    "Identifies the date and time when the object was closed."
    closedAt: GitHub_DateTime
    "List of columns in the project"
    columns(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ProjectColumnConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The actor who originally created the project."
    creator: GitHub_Actor
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "The project's name."
    name: String!
    "The project's number."
    number: Int!
    "The project's owner. Currently limited to repositories, organizations, and users."
    owner: GitHub_ProjectOwner!
    "List of pending cards in this project"
    pendingCards(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #A list of archived states to filter the cards by
        archivedStates: [GitHub_ProjectCardArchivedState],
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ProjectCardConnection!
    "The HTTP path for this project"
    resourcePath: GitHub_URI!
    "Whether the project is open or closed."
    state: GitHub_ProjectState!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this project"
    url: GitHub_URI!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
}

"A card in a project."
type GitHub_ProjectCard implements GitHub_Node {
    """
    The project column this card is associated under. A card may only belong to one
    project column at a time. The column field will be null if the card is created
    in a pending state and has yet to be associated with a column. Once cards are
    associated with a column, they will not become pending in the future.
    """
    column: GitHub_ProjectColumn
    "The card content item"
    content: GitHub_ProjectCardItem
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The actor who created this card"
    creator: GitHub_Actor
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "Whether the card is archived"
    isArchived: Boolean!
    "The card note"
    note: String
    "The project that contains this card."
    project: GitHub_Project!
    "The HTTP path for this card"
    resourcePath: GitHub_URI!
    "The state of ProjectCard"
    state: GitHub_ProjectCardState
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this card"
    url: GitHub_URI!
}

"The connection type for ProjectCard."
type GitHub_ProjectCardConnection {
    "A list of edges."
    edges: [GitHub_ProjectCardEdge]
    "A list of nodes."
    nodes: [GitHub_ProjectCard]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ProjectCardEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ProjectCard
}

"A column inside a project."
type GitHub_ProjectColumn implements GitHub_Node {
    "List of cards in the column"
    cards(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #A list of archived states to filter the cards by
        archivedStates: [GitHub_ProjectCardArchivedState],
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ProjectCardConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "The project column's name."
    name: String!
    "The project that contains this column."
    project: GitHub_Project!
    "The semantic purpose of the column"
    purpose: GitHub_ProjectColumnPurpose
    "The HTTP path for this project column"
    resourcePath: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this project column"
    url: GitHub_URI!
}

"The connection type for ProjectColumn."
type GitHub_ProjectColumnConnection {
    "A list of edges."
    edges: [GitHub_ProjectColumnEdge]
    "A list of nodes."
    nodes: [GitHub_ProjectColumn]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ProjectColumnEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ProjectColumn
}

"A list of projects associated with the owner."
type GitHub_ProjectConnection {
    "A list of edges."
    edges: [GitHub_ProjectEdge]
    "A list of nodes."
    nodes: [GitHub_Project]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ProjectEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Project
}

"A user's public key."
type GitHub_PublicKey implements GitHub_Node {
    "The last time this authorization was used to perform an action"
    accessedAt: GitHub_DateTime
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The fingerprint for this PublicKey"
    fingerprint: String
    id: ID!
    "Whether this PublicKey is read-only or not"
    isReadOnly: Boolean!
    "The public key string"
    key: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
}

"The connection type for PublicKey."
type GitHub_PublicKeyConnection {
    "A list of edges."
    edges: [GitHub_PublicKeyEdge]
    "A list of nodes."
    nodes: [GitHub_PublicKey]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PublicKeyEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PublicKey
}

"A repository pull request."
type GitHub_PullRequest implements GitHub_Assignable & GitHub_Closable & GitHub_Comment & GitHub_Labelable & GitHub_Lockable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Subscribable & GitHub_UniformResourceLocatable & GitHub_Updatable & GitHub_UpdatableComment {
    "Reason that the conversation was locked."
    activeLockReason: GitHub_LockReason
    "The number of additions in this pull request."
    additions: Int!
    "A list of Users assigned to this object."
    assignees(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "Identifies the base Ref associated with the pull request."
    baseRef: GitHub_Ref
    "Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."
    baseRefName: String!
    "Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."
    baseRefOid: GitHub_GitObjectID!
    "The repository associated with this pull request's base Ref."
    baseRepository: GitHub_Repository
    "The body as Markdown."
    body: String!
    "The body rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body rendered to text."
    bodyText: String!
    "The number of changed files in this pull request."
    changedFiles: Int!
    "`true` if the pull request is closed"
    closed: Boolean!
    "Identifies the date and time when the object was closed."
    closedAt: GitHub_DateTime
    "A list of comments associated with the pull request."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_IssueCommentConnection!
    "A list of commits present in this pull request's head branch not present in the base branch."
    commits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PullRequestCommitConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The number of deletions in this pull request."
    deletions: Int!
    "The actor who edited this pull request's body."
    editor: GitHub_Actor
    "Lists the files changed within this pull request."
    files(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PullRequestChangedFileConnection
    "Identifies the head Ref associated with the pull request."
    headRef: GitHub_Ref
    "Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."
    headRefName: String!
    "Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."
    headRefOid: GitHub_GitObjectID!
    "The repository associated with this pull request's head Ref."
    headRepository: GitHub_Repository
    "The owner of the repository associated with this pull request's head Ref."
    headRepositoryOwner: GitHub_RepositoryOwner
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "The head and base repositories are different."
    isCrossRepository: Boolean!
    "A list of labels associated with the object."
    labels(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_LabelConnection
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "`true` if the pull request is locked"
    locked: Boolean!
    "Indicates whether maintainers can modify the pull request."
    maintainerCanModify: Boolean!
    "The commit that was created when this pull request was merged."
    mergeCommit: GitHub_Commit
    "Whether or not the pull request can be merged based on the existence of merge conflicts."
    mergeable: GitHub_MergeableState!
    "Whether or not the pull request was merged."
    merged: Boolean!
    "The date and time that the pull request was merged."
    mergedAt: GitHub_DateTime
    "The actor who merged the pull request."
    mergedBy: GitHub_Actor
    "Identifies the milestone associated with the pull request."
    milestone: GitHub_Milestone
    "Identifies the pull request number."
    number: Int!
    "A list of Users that are participating in the Pull Request conversation."
    participants(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "The permalink to the pull request."
    permalink: GitHub_URI!
    """
    The commit that GitHub automatically generated to test if this pull request
    could be merged. This field will not return a value if the pull request is
    merged, or if the test merge commit is still being generated. See the
    `mergeable` field for more details on the mergeability of the pull request.
    """
    potentialMergeCommit: GitHub_Commit
    "List of project cards associated with this pull request."
    projectCards(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #A list of archived states to filter the cards by
        archivedStates: [GitHub_ProjectCardArchivedState],
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ProjectCardConnection!
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path for this pull request."
    resourcePath: GitHub_URI!
    "The HTTP path for reverting this pull request."
    revertResourcePath: GitHub_URI!
    "The HTTP URL for reverting this pull request."
    revertUrl: GitHub_URI!
    "A list of review requests associated with the pull request."
    reviewRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ReviewRequestConnection
    "The list of all review threads for this pull request."
    reviewThreads(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PullRequestReviewThreadConnection!
    "A list of reviews associated with the pull request."
    reviews(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Filter by author of the review.
        author: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #A list of states to filter the reviews.
        states: [GitHub_PullRequestReviewState!]
    ): GitHub_PullRequestReviewConnection
    "Identifies the state of the pull request."
    state: GitHub_PullRequestState!
    "A list of reviewer suggestions based on commit history and past review comments."
    suggestedReviewers: [GitHub_SuggestedReviewer]!
    "A list of events, comments, commits, etc. associated with the pull request."
    timeline(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows filtering timeline events by a `since` timestamp.
        since: GitHub_DateTime
    ): GitHub_PullRequestTimelineConnection!
    "A list of events, comments, commits, etc. associated with the pull request."
    timelineItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Filter timeline items by type.
        itemTypes: [GitHub_PullRequestTimelineItemsItemType!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter timeline items by a `since` timestamp.
        since: GitHub_DateTime,
        #Skips the first _n_ elements in the list.
        skip: Int
    ): GitHub_PullRequestTimelineItemsConnection!
    "Identifies the pull request title."
    title: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this pull request."
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Whether or not the viewer can apply suggestion."
    viewerCanApplySuggestion: Boolean!
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
}

"A file changed in a pull request."
type GitHub_PullRequestChangedFile {
    "The number of additions to the file."
    additions: Int!
    "The number of deletions to the file."
    deletions: Int!
    "The path of the file."
    path: String!
}

"The connection type for PullRequestChangedFile."
type GitHub_PullRequestChangedFileConnection {
    "A list of edges."
    edges: [GitHub_PullRequestChangedFileEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestChangedFile]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PullRequestChangedFileEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestChangedFile
}

"Represents a Git commit part of a pull request."
type GitHub_PullRequestCommit implements GitHub_Node & GitHub_UniformResourceLocatable {
    "The Git commit object"
    commit: GitHub_Commit!
    id: ID!
    "The pull request this commit belongs to"
    pullRequest: GitHub_PullRequest!
    "The HTTP path for this pull request commit"
    resourcePath: GitHub_URI!
    "The HTTP URL for this pull request commit"
    url: GitHub_URI!
}

"Represents a commit comment thread part of a pull request."
type GitHub_PullRequestCommitCommentThread implements GitHub_Node & GitHub_RepositoryNode {
    "The comments that exist in this thread."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitCommentConnection!
    "The commit the comments were made on."
    commit: GitHub_Commit!
    id: ID!
    "The file the comments were made on."
    path: String
    "The position in the diff for the commit that the comment was made on."
    position: Int
    "The pull request this commit comment thread belongs to"
    pullRequest: GitHub_PullRequest!
    "The repository associated with this node."
    repository: GitHub_Repository!
}

"The connection type for PullRequestCommit."
type GitHub_PullRequestCommitConnection {
    "A list of edges."
    edges: [GitHub_PullRequestCommitEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestCommit]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PullRequestCommitEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestCommit
}

"The connection type for PullRequest."
type GitHub_PullRequestConnection {
    "A list of edges."
    edges: [GitHub_PullRequestEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequest]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"This aggregates pull requests opened by a user within one repository."
type GitHub_PullRequestContributionsByRepository {
    "The pull request contributions."
    contributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedPullRequestContributionConnection!
    "The repository in which the pull requests were opened."
    repository: GitHub_Repository!
}

"An edge in a connection."
type GitHub_PullRequestEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequest
}

"A review object for a given pull request."
type GitHub_PullRequestReview implements GitHub_Comment & GitHub_Deletable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Updatable & GitHub_UpdatableComment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "Identifies the pull request review body."
    body: String!
    "The body of this review rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The body of this review rendered as plain text."
    bodyText: String!
    "A list of review comments for the current pull request review."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PullRequestReviewCommentConnection!
    "Identifies the commit associated with this pull request review."
    commit: GitHub_Commit
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "A list of teams that this review was made on behalf of."
    onBehalfOf(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_TeamConnection!
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "Identifies the pull request associated with this pull request review."
    pullRequest: GitHub_PullRequest!
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path permalink for this PullRequestReview."
    resourcePath: GitHub_URI!
    "Identifies the current state of the pull request review."
    state: GitHub_PullRequestReviewState!
    "Identifies when the Pull Request Review was submitted"
    submittedAt: GitHub_DateTime
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL permalink for this PullRequestReview."
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"A review comment associated with a given repository pull request."
type GitHub_PullRequestReviewComment implements GitHub_Comment & GitHub_Deletable & GitHub_Node & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Updatable & GitHub_UpdatableComment {
    "The actor who authored the comment."
    author: GitHub_Actor
    "Author's association with the subject of the comment."
    authorAssociation: GitHub_CommentAuthorAssociation!
    "The comment body of this review comment."
    body: String!
    "The comment body of this review comment rendered to HTML."
    bodyHTML: GitHub_HTML!
    "The comment body of this review comment rendered as plain text."
    bodyText: String!
    "Identifies the commit associated with the comment."
    commit: GitHub_Commit!
    "Identifies when the comment was created."
    createdAt: GitHub_DateTime!
    "Check if this comment was created via an email reply."
    createdViaEmail: Boolean!
    "Identifies the primary key from the database."
    databaseId: Int
    "The diff hunk to which the comment applies."
    diffHunk: String!
    "Identifies when the comment was created in a draft state."
    draftedAt: GitHub_DateTime!
    "The actor who edited the comment."
    editor: GitHub_Actor
    id: ID!
    "Check if this comment was edited and includes an edit with the creation data"
    includesCreatedEdit: Boolean!
    "Returns whether or not a comment has been minimized."
    isMinimized: Boolean!
    "The moment the editor made the last edit"
    lastEditedAt: GitHub_DateTime
    "Returns why the comment was minimized."
    minimizedReason: String
    "Identifies the original commit associated with the comment."
    originalCommit: GitHub_Commit
    "The original line index in the diff to which the comment applies."
    originalPosition: Int!
    "Identifies when the comment body is outdated"
    outdated: Boolean!
    "The path to which the comment applies."
    path: String!
    "The line index in the diff to which the comment applies."
    position: Int
    "Identifies when the comment was published at."
    publishedAt: GitHub_DateTime
    "The pull request associated with this review comment."
    pullRequest: GitHub_PullRequest!
    "The pull request review associated with this review comment."
    pullRequestReview: GitHub_PullRequestReview
    "A list of reactions grouped by content left on the subject."
    reactionGroups: [GitHub_ReactionGroup!]
    "A list of Reactions left on the Issue."
    reactions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Allows filtering Reactions by emoji.
        content: GitHub_ReactionContent,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Allows specifying the order in which reactions are returned.
        orderBy: GitHub_ReactionOrder
    ): GitHub_ReactionConnection!
    "The comment this is a reply to."
    replyTo: GitHub_PullRequestReviewComment
    "The repository associated with this node."
    repository: GitHub_Repository!
    "The HTTP path permalink for this review comment."
    resourcePath: GitHub_URI!
    "Identifies the state of the comment."
    state: GitHub_PullRequestReviewCommentState!
    "Identifies when the comment was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL permalink for this review comment."
    url: GitHub_URI!
    "A list of edits to this content."
    userContentEdits(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserContentEditConnection
    "Check if the current viewer can delete this object."
    viewerCanDelete: Boolean!
    "Check if the current viewer can minimize this object."
    viewerCanMinimize: Boolean!
    "Can user react to this subject"
    viewerCanReact: Boolean!
    "Check if the current viewer can update this object."
    viewerCanUpdate: Boolean!
    "Reasons why the current viewer can not update this comment."
    viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
    "Did the viewer author this comment."
    viewerDidAuthor: Boolean!
}

"The connection type for PullRequestReviewComment."
type GitHub_PullRequestReviewCommentConnection {
    "A list of edges."
    edges: [GitHub_PullRequestReviewCommentEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestReviewComment]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PullRequestReviewCommentEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestReviewComment
}

"The connection type for PullRequestReview."
type GitHub_PullRequestReviewConnection {
    "A list of edges."
    edges: [GitHub_PullRequestReviewEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestReview]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"This aggregates pull request reviews made by a user within one repository."
type GitHub_PullRequestReviewContributionsByRepository {
    "The pull request review contributions."
    contributions(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for contributions returned from the connection.
        orderBy: GitHub_ContributionOrder
    ): GitHub_CreatedPullRequestReviewContributionConnection!
    "The repository in which the pull request reviews were made."
    repository: GitHub_Repository!
}

"An edge in a connection."
type GitHub_PullRequestReviewEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestReview
}

"A threaded list of comments for a given pull request."
type GitHub_PullRequestReviewThread implements GitHub_Node {
    "A list of pull request comments associated with the thread."
    comments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PullRequestReviewCommentConnection!
    id: ID!
    "Whether this thread has been resolved"
    isResolved: Boolean!
    "Identifies the pull request associated with this thread."
    pullRequest: GitHub_PullRequest!
    "Identifies the repository associated with this thread."
    repository: GitHub_Repository!
    "The user who resolved this thread"
    resolvedBy: GitHub_User
    "Whether or not the viewer can resolve this thread"
    viewerCanResolve: Boolean!
    "Whether or not the viewer can unresolve this thread"
    viewerCanUnresolve: Boolean!
}

"Review comment threads for a pull request review."
type GitHub_PullRequestReviewThreadConnection {
    "A list of edges."
    edges: [GitHub_PullRequestReviewThreadEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestReviewThread]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PullRequestReviewThreadEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestReviewThread
}

"Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits."
type GitHub_PullRequestRevisionMarker {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The last commit the viewer has seen."
    lastSeenCommit: GitHub_Commit!
    "The pull request to which the marker belongs."
    pullRequest: GitHub_PullRequest!
}

"The connection type for PullRequestTimelineItem."
type GitHub_PullRequestTimelineConnection {
    "A list of edges."
    edges: [GitHub_PullRequestTimelineItemEdge]
    "A list of nodes."
    nodes: [GitHub_PullRequestTimelineItem]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PullRequestTimelineItemEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestTimelineItem
}

"The connection type for PullRequestTimelineItems."
type GitHub_PullRequestTimelineItemsConnection {
    "A list of edges."
    edges: [GitHub_PullRequestTimelineItemsEdge]
    "Identifies the count of items after applying `before` and `after` filters."
    filteredCount: Int!
    "A list of nodes."
    nodes: [GitHub_PullRequestTimelineItems]
    "Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing."
    pageCount: Int!
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
    "Identifies the date and time when the timeline was last updated."
    updatedAt: GitHub_DateTime!
}

"An edge in a connection."
type GitHub_PullRequestTimelineItemsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PullRequestTimelineItems
}

"A team or user who has the ability to push to a protected branch."
type GitHub_PushAllowance implements GitHub_Node {
    "The actor that can push."
    actor: GitHub_PushAllowanceActor
    "Identifies the branch protection rule associated with the allowed user or team."
    branchProtectionRule: GitHub_BranchProtectionRule
    id: ID!
}

"The connection type for PushAllowance."
type GitHub_PushAllowanceConnection {
    "A list of edges."
    edges: [GitHub_PushAllowanceEdge]
    "A list of nodes."
    nodes: [GitHub_PushAllowance]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_PushAllowanceEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_PushAllowance
}

"Represents the client's rate limit."
type GitHub_RateLimit {
    "The point cost for the current query counting against the rate limit."
    cost: Int!
    "The maximum number of points the client is permitted to consume in a 60 minute window."
    limit: Int!
    "The maximum number of nodes this query may return"
    nodeCount: Int!
    "The number of points remaining in the current rate limit window."
    remaining: Int!
    "The time at which the current rate limit window resets in UTC epoch seconds."
    resetAt: GitHub_DateTime!
}

"The connection type for User."
type GitHub_ReactingUserConnection {
    "A list of edges."
    edges: [GitHub_ReactingUserEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a user that's made a reaction."
type GitHub_ReactingUserEdge {
    "A cursor for use in pagination."
    cursor: String!
    node: GitHub_User!
    "The moment when the user made the reaction."
    reactedAt: GitHub_DateTime!
}

"An emoji reaction to a particular piece of content."
type GitHub_Reaction implements GitHub_Node {
    "Identifies the emoji reaction."
    content: GitHub_ReactionContent!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "The reactable piece of content"
    reactable: GitHub_Reactable!
    "Identifies the user who created this reaction."
    user: GitHub_User
}

"A list of reactions that have been left on the subject."
type GitHub_ReactionConnection {
    "A list of edges."
    edges: [GitHub_ReactionEdge]
    "A list of nodes."
    nodes: [GitHub_Reaction]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
    "Whether or not the authenticated user has left a reaction on the subject."
    viewerHasReacted: Boolean!
}

"An edge in a connection."
type GitHub_ReactionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Reaction
}

"A group of emoji reactions to a particular piece of content."
type GitHub_ReactionGroup {
    "Identifies the emoji reaction."
    content: GitHub_ReactionContent!
    "Identifies when the reaction was created."
    createdAt: GitHub_DateTime
    "The subject that was reacted to."
    subject: GitHub_Reactable!
    "Users who have reacted to the reaction subject with the emotion represented by this reaction group"
    users(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_ReactingUserConnection!
    "Whether or not the authenticated user has left a reaction on the subject."
    viewerHasReacted: Boolean!
}

"Represents a Git reference."
type GitHub_Ref implements GitHub_Node {
    "A list of pull requests with this ref as the head ref."
    associatedPullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #The base ref name to filter the pull requests by.
        baseRefName: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #The head ref name to filter the pull requests by.
        headRefName: String,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the pull requests by.
        states: [GitHub_PullRequestState!]
    ): GitHub_PullRequestConnection!
    id: ID!
    "The ref name."
    name: String!
    "The ref's prefix, such as `refs/heads/` or `refs/tags/`."
    prefix: String!
    "The repository the ref belongs to."
    repository: GitHub_Repository!
    "The object the ref points to."
    target: GitHub_GitObject!
}

"The connection type for Ref."
type GitHub_RefConnection {
    "A list of edges."
    edges: [GitHub_RefEdge]
    "A list of nodes."
    nodes: [GitHub_Ref]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_RefEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Ref
}

"Represents a 'referenced' event on a given `ReferencedSubject`."
type GitHub_ReferencedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the commit associated with the 'referenced' event."
    commit: GitHub_Commit
    "Identifies the repository associated with the 'referenced' event."
    commitRepository: GitHub_Repository!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Reference originated in a different repository."
    isCrossRepository: Boolean!
    "Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."
    isDirectReference: Boolean!
    "Object referenced by event."
    subject: GitHub_ReferencedSubject!
}

"A release contains the content for a release."
type GitHub_Release implements GitHub_Node & GitHub_UniformResourceLocatable {
    "The author of the release"
    author: GitHub_User
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the description of the release."
    description: String
    id: ID!
    "Whether or not the release is a draft"
    isDraft: Boolean!
    "Whether or not the release is a prerelease"
    isPrerelease: Boolean!
    "Identifies the title of the release."
    name: String
    "Identifies the date and time when the release was created."
    publishedAt: GitHub_DateTime
    "List of releases assets which are dependent on this release."
    releaseAssets(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #A list of names to filter the assets by.
        name: String
    ): GitHub_ReleaseAssetConnection!
    "The HTTP path for this issue"
    resourcePath: GitHub_URI!
    "The Git tag the release points to"
    tag: GitHub_Ref
    "The name of the release's Git tag"
    tagName: String!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this issue"
    url: GitHub_URI!
}

"A release asset contains the content for a release asset."
type GitHub_ReleaseAsset implements GitHub_Node {
    "The asset's content-type"
    contentType: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The number of times this asset was downloaded"
    downloadCount: Int!
    "Identifies the URL where you can download the release asset via the browser."
    downloadUrl: GitHub_URI!
    id: ID!
    "Identifies the title of the release asset."
    name: String!
    "Release that the asset is associated with"
    release: GitHub_Release
    "The size (in bytes) of the asset"
    size: Int!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The user that performed the upload"
    uploadedBy: GitHub_User!
    "Identifies the URL of the release asset."
    url: GitHub_URI!
}

"The connection type for ReleaseAsset."
type GitHub_ReleaseAssetConnection {
    "A list of edges."
    edges: [GitHub_ReleaseAssetEdge]
    "A list of nodes."
    nodes: [GitHub_ReleaseAsset]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ReleaseAssetEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ReleaseAsset
}

"The connection type for Release."
type GitHub_ReleaseConnection {
    "A list of edges."
    edges: [GitHub_ReleaseEdge]
    "A list of nodes."
    nodes: [GitHub_Release]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ReleaseEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Release
}

"Autogenerated return type of RemoveAssigneesFromAssignable"
type GitHub_RemoveAssigneesFromAssignablePayload {
    "The item that was unassigned."
    assignable: GitHub_Assignable
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of RemoveLabelsFromLabelable"
type GitHub_RemoveLabelsFromLabelablePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Labelable the labels were removed from."
    labelable: GitHub_Labelable
}

"Autogenerated return type of RemoveOutsideCollaborator"
type GitHub_RemoveOutsideCollaboratorPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The user that was removed as an outside collaborator."
    removedUser: GitHub_User
}

"Autogenerated return type of RemoveReaction"
type GitHub_RemoveReactionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The reaction object."
    reaction: GitHub_Reaction
    "The reactable subject."
    subject: GitHub_Reactable
}

"Autogenerated return type of RemoveStar"
type GitHub_RemoveStarPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The starrable."
    starrable: GitHub_Starrable
}

"Represents a 'removed_from_project' event on a given issue or pull request."
type GitHub_RemovedFromProjectEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
}

"Represents a 'renamed' event on a given issue or pull request"
type GitHub_RenamedTitleEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the current title of the issue or pull request."
    currentTitle: String!
    id: ID!
    "Identifies the previous title of the issue or pull request."
    previousTitle: String!
    "Subject that was renamed."
    subject: GitHub_RenamedTitleSubject!
}

"Autogenerated return type of ReopenIssue"
type GitHub_ReopenIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The issue that was opened."
    issue: GitHub_Issue
}

"Autogenerated return type of ReopenPullRequest"
type GitHub_ReopenPullRequestPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The pull request that was reopened."
    pullRequest: GitHub_PullRequest
}

"Represents a 'reopened' event on any `Closable`."
type GitHub_ReopenedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Object that was reopened."
    closable: GitHub_Closable!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
}

"A repository contains the content for a project."
type GitHub_Repository implements GitHub_Node & GitHub_ProjectOwner & GitHub_RegistryPackageOwner & GitHub_RepositoryInfo & GitHub_Starrable & GitHub_Subscribable & GitHub_UniformResourceLocatable {
    "A list of users that can be assigned to issues in this repository."
    assignableUsers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "A list of branch protection rules for this repository."
    branchProtectionRules(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_BranchProtectionRuleConnection!
    "Returns the code of conduct for this repository"
    codeOfConduct: GitHub_CodeOfConduct
    "A list of collaborators associated with the repository."
    collaborators(
        #Collaborators affiliation level with a repository.
        affiliation: GitHub_CollaboratorAffiliation,
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_RepositoryCollaboratorConnection
    "A list of commit comments associated with the repository."
    commitComments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitCommentConnection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    "The Ref associated with the repository's default branch."
    defaultBranchRef: GitHub_Ref
    "A list of deploy keys that are on this repository."
    deployKeys(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_DeployKeyConnection!
    "Deployments associated with the repository"
    deployments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Environments to list deployments for
        environments: [String!],
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for deployments returned from the connection.
        orderBy: GitHub_DeploymentOrder
    ): GitHub_DeploymentConnection!
    "The description of the repository."
    description: String
    "The description of the repository rendered to HTML."
    descriptionHTML: GitHub_HTML!
    "The number of kilobytes this repository occupies on disk."
    diskUsage: Int
    "Returns how many forks there are of this repository in the whole network."
    forkCount: Int!
    "A list of direct forked repositories."
    forks(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "Indicates if the repository has issues feature enabled."
    hasIssuesEnabled: Boolean!
    "Indicates if the repository has wiki feature enabled."
    hasWikiEnabled: Boolean!
    "The repository's URL."
    homepageUrl: GitHub_URI
    id: ID!
    "Indicates if the repository is unmaintained."
    isArchived: Boolean!
    "Returns whether or not this repository disabled."
    isDisabled: Boolean!
    "Identifies if the repository is a fork."
    isFork: Boolean!
    "Indicates if the repository has been locked or not."
    isLocked: Boolean!
    "Identifies if the repository is a mirror."
    isMirror: Boolean!
    "Identifies if the repository is private."
    isPrivate: Boolean!
    "Returns a single issue from the current repository by number."
    issue(
        #The number for the issue to be returned.
        number: Int!
    ): GitHub_Issue
    "Returns a single issue-like object from the current repository by number."
    issueOrPullRequest(
        #The number for the issue to be returned.
        number: Int!
    ): GitHub_IssueOrPullRequest
    "A list of issues that have been opened in the repository."
    issues(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Filtering options for issues returned from the connection.
        filterBy: GitHub_IssueFilters,
        #Returns the first _n_ elements from the list.
        first: Int,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for issues returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the issues by.
        states: [GitHub_IssueState!]
    ): GitHub_IssueConnection!
    "Returns a single label by name"
    label(
        #Label name
        name: String!
    ): GitHub_Label
    "A list of labels associated with the repository."
    labels(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #If provided, searches labels by name and description.
        query: String
    ): GitHub_LabelConnection
    "A list containing a breakdown of the language composition of the repository."
    languages(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_LanguageOrder
    ): GitHub_LanguageConnection
    "The license associated with the repository"
    licenseInfo: GitHub_License
    "The reason the repository has been locked."
    lockReason: GitHub_RepositoryLockReason
    "A list of Users that can be mentioned in the context of the repository."
    mentionableUsers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
    "Whether or not PRs are merged with a merge commit on this repository."
    mergeCommitAllowed: Boolean!
    "Returns a single milestone from the current repository by number."
    milestone(
        #The number for the milestone to be returned.
        number: Int!
    ): GitHub_Milestone
    "A list of milestones associated with the repository."
    milestones(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for milestones.
        orderBy: GitHub_MilestoneOrder,
        #Filter by the state of the milestones.
        states: [GitHub_MilestoneState!]
    ): GitHub_MilestoneConnection
    "The repository's original mirror URL."
    mirrorUrl: GitHub_URI
    "The name of the repository."
    name: String!
    "The repository's name with owner."
    nameWithOwner: String!
    "A Git object in the repository"
    object(
        #A Git revision expression suitable for rev-parse
        expression: String,
        #The Git object ID
        oid: GitHub_GitObjectID
    ): GitHub_GitObject
    "The User owner of the repository."
    owner: GitHub_RepositoryOwner!
    "The repository parent, if this is a fork."
    parent: GitHub_Repository
    "The primary language of the repository's code."
    primaryLanguage: GitHub_Language
    "Find project by number."
    project(
        #The project number to find.
        number: Int!
    ): GitHub_Project
    "A list of projects under the owner."
    projects(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for projects returned from the connection
        orderBy: GitHub_ProjectOrder,
        #Query to search projects by, currently only searching by name.
        search: String,
        #A list of states to filter the projects by.
        states: [GitHub_ProjectState!]
    ): GitHub_ProjectConnection!
    "The HTTP path listing the repository's projects"
    projectsResourcePath: GitHub_URI!
    "The HTTP URL listing the repository's projects"
    projectsUrl: GitHub_URI!
    "Returns a single pull request from the current repository by number."
    pullRequest(
        #The number for the pull request to be returned.
        number: Int!
    ): GitHub_PullRequest
    "A list of pull requests that have been opened in the repository."
    pullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #The base ref name to filter the pull requests by.
        baseRefName: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #The head ref name to filter the pull requests by.
        headRefName: String,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the pull requests by.
        states: [GitHub_PullRequestState!]
    ): GitHub_PullRequestConnection!
    "Identifies when the repository was last pushed to."
    pushedAt: GitHub_DateTime
    "Whether or not rebase-merging is enabled on this repository."
    rebaseMergeAllowed: Boolean!
    "Fetch a given ref from the repository"
    ref(
        """

        The ref to retrieve. Fully qualified matches are checked in order
        (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
        """
        qualifiedName: String!
    ): GitHub_Ref
    "Fetch a list of refs from the repository"
    refs(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #DEPRECATED: use orderBy. The ordering direction.
        direction: GitHub_OrderDirection,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for refs returned from the connection.
        orderBy: GitHub_RefOrder,
        #A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
        refPrefix: String!
    ): GitHub_RefConnection
    "Lookup a single release given various criteria."
    release(
        #The name of the Tag the Release was created from
        tagName: String!
    ): GitHub_Release
    "List of releases which are dependent on this repository."
    releases(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_ReleaseOrder
    ): GitHub_ReleaseConnection!
    "A list of applied repository-topic associations for this repository."
    repositoryTopics(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_RepositoryTopicConnection!
    "The HTTP path for this repository"
    resourcePath: GitHub_URI!
    "A description of the repository, rendered to HTML without any links in it."
    shortDescriptionHTML(
        #How many characters to return.
        limit: Int = 200
    ): GitHub_HTML!
    "Whether or not squash-merging is enabled on this repository."
    squashMergeAllowed: Boolean!
    "The SSH URL to clone this repository"
    sshUrl: GitHub_GitSSHRemote!
    "A list of users who have starred this starrable."
    stargazers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_StarOrder
    ): GitHub_StargazerConnection!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this repository"
    url: GitHub_URI!
    "Indicates whether the viewer has admin permissions on this repository."
    viewerCanAdminister: Boolean!
    "Can the current viewer create new projects on this owner."
    viewerCanCreateProjects: Boolean!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Indicates whether the viewer can update the topics of this repository."
    viewerCanUpdateTopics: Boolean!
    "Returns a boolean indicating whether the viewing user has starred this starrable."
    viewerHasStarred: Boolean!
    "The users permission level on the repository. Will return null if authenticated as an GitHub App."
    viewerPermission: GitHub_RepositoryPermission
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
    "A list of users watching the repository."
    watchers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_UserConnection!
}

"The connection type for User."
type GitHub_RepositoryCollaboratorConnection {
    "A list of edges."
    edges: [GitHub_RepositoryCollaboratorEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a user who is a collaborator of a repository."
type GitHub_RepositoryCollaboratorEdge {
    "A cursor for use in pagination."
    cursor: String!
    node: GitHub_User!
    "The permission the user has on the repository."
    permission: GitHub_RepositoryPermission!
    "A list of sources for the user's access to the repository."
    permissionSources: [GitHub_PermissionSource!]
}

"A list of repositories owned by the subject."
type GitHub_RepositoryConnection {
    "A list of edges."
    edges: [GitHub_RepositoryEdge]
    "A list of nodes."
    nodes: [GitHub_Repository]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
    "The total size in kilobytes of all repositories in the connection."
    totalDiskUsage: Int!
}

"An edge in a connection."
type GitHub_RepositoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Repository
}

"An invitation for a user to be added to a repository."
type GitHub_RepositoryInvitation implements GitHub_Node {
    id: ID!
    "The user who received the invitation."
    invitee: GitHub_User!
    "The user who created the invitation."
    inviter: GitHub_User!
    "The permission granted on this repository by this invitation."
    permission: GitHub_RepositoryPermission!
    "The Repository the user is invited to."
    repository: GitHub_RepositoryInfo
}

"An edge in a connection."
type GitHub_RepositoryInvitationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_RepositoryInvitation
}

"A repository-topic connects a repository to a topic."
type GitHub_RepositoryTopic implements GitHub_Node & GitHub_UniformResourceLocatable {
    id: ID!
    "The HTTP path for this repository-topic."
    resourcePath: GitHub_URI!
    "The topic."
    topic: GitHub_Topic!
    "The HTTP URL for this repository-topic."
    url: GitHub_URI!
}

"The connection type for RepositoryTopic."
type GitHub_RepositoryTopicConnection {
    "A list of edges."
    edges: [GitHub_RepositoryTopicEdge]
    "A list of nodes."
    nodes: [GitHub_RepositoryTopic]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_RepositoryTopicEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_RepositoryTopic
}

"Autogenerated return type of RequestReviews"
type GitHub_RequestReviewsPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The pull request that is getting requests."
    pullRequest: GitHub_PullRequest
    "The edge from the pull request to the requested reviewers."
    requestedReviewersEdge: GitHub_UserEdge
}

"Autogenerated return type of ResolveReviewThread"
type GitHub_ResolveReviewThreadPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The thread to resolve."
    thread: GitHub_PullRequestReviewThread
}

"Represents a private contribution a user made on GitHub."
type GitHub_RestrictedContribution implements GitHub_Contribution {
    """
    Whether this contribution is associated with a record you do not have access to. For
    example, your own 'first issue' contribution may have been made on a repository you can no
    longer access.
    """
    isRestricted: Boolean!
    "When this contribution was made."
    occurredAt: GitHub_DateTime!
    "The HTTP path for this contribution."
    resourcePath: GitHub_URI!
    "The HTTP URL for this contribution."
    url: GitHub_URI!
    "The user who made this contribution."
    user: GitHub_User!
}

"A team or user who has the ability to dismiss a review on a protected branch."
type GitHub_ReviewDismissalAllowance implements GitHub_Node {
    "The actor that can dismiss."
    actor: GitHub_ReviewDismissalAllowanceActor
    "Identifies the branch protection rule associated with the allowed user or team."
    branchProtectionRule: GitHub_BranchProtectionRule
    id: ID!
}

"The connection type for ReviewDismissalAllowance."
type GitHub_ReviewDismissalAllowanceConnection {
    "A list of edges."
    edges: [GitHub_ReviewDismissalAllowanceEdge]
    "A list of nodes."
    nodes: [GitHub_ReviewDismissalAllowance]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ReviewDismissalAllowanceEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ReviewDismissalAllowance
}

"Represents a 'review_dismissed' event on a given issue or pull request."
type GitHub_ReviewDismissedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    "Identifies the optional message associated with the 'review_dismissed' event."
    dismissalMessage: String
    "Identifies the optional message associated with the event, rendered to HTML."
    dismissalMessageHTML: String
    id: ID!
    "Identifies the message associated with the 'review_dismissed' event."
    message: String! @deprecated(reason : "`message` is being removed because it not nullable, whereas the underlying field is optional. Use `dismissalMessage` instead. Removal on 2019-07-01 UTC.")
    "The message associated with the event, rendered to HTML."
    messageHtml: GitHub_HTML! @deprecated(reason : "`messageHtml` is being removed because it not nullable, whereas the underlying field is optional. Use `dismissalMessageHTML` instead. Removal on 2019-07-01 UTC.")
    "Identifies the previous state of the review with the 'review_dismissed' event."
    previousReviewState: GitHub_PullRequestReviewState!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "Identifies the commit which caused the review to become stale."
    pullRequestCommit: GitHub_PullRequestCommit
    "The HTTP path for this review dismissed event."
    resourcePath: GitHub_URI!
    "Identifies the review associated with the 'review_dismissed' event."
    review: GitHub_PullRequestReview
    "The HTTP URL for this review dismissed event."
    url: GitHub_URI!
}

"A request for a user to review a pull request."
type GitHub_ReviewRequest implements GitHub_Node {
    "Identifies the primary key from the database."
    databaseId: Int
    id: ID!
    "Identifies the pull request associated with this review request."
    pullRequest: GitHub_PullRequest!
    "The reviewer that is requested."
    requestedReviewer: GitHub_RequestedReviewer
}

"The connection type for ReviewRequest."
type GitHub_ReviewRequestConnection {
    "A list of edges."
    edges: [GitHub_ReviewRequestEdge]
    "A list of nodes."
    nodes: [GitHub_ReviewRequest]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_ReviewRequestEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_ReviewRequest
}

"Represents an 'review_request_removed' event on a given pull request."
type GitHub_ReviewRequestRemovedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "Identifies the reviewer whose review request was removed."
    requestedReviewer: GitHub_RequestedReviewer
}

"Represents an 'review_requested' event on a given pull request."
type GitHub_ReviewRequestedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "PullRequest referenced by event."
    pullRequest: GitHub_PullRequest!
    "Identifies the reviewer whose review was requested."
    requestedReviewer: GitHub_RequestedReviewer
}

"A list of results that matched against a search query."
type GitHub_SearchResultItemConnection {
    "The number of pieces of code that matched the search query."
    codeCount: Int!
    "A list of edges."
    edges: [GitHub_SearchResultItemEdge]
    "The number of issues that matched the search query."
    issueCount: Int!
    "A list of nodes."
    nodes: [GitHub_SearchResultItem]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "The number of repositories that matched the search query."
    repositoryCount: Int!
    "The number of users that matched the search query."
    userCount: Int!
    "The number of wiki pages that matched the search query."
    wikiCount: Int!
}

"An edge in a connection."
type GitHub_SearchResultItemEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_SearchResultItem
    "Text matches on the result found."
    textMatches: [GitHub_TextMatch]
}

"A GitHub Security Advisory"
type GitHub_SecurityAdvisory implements GitHub_Node {
    "Identifies the primary key from the database."
    databaseId: Int
    "This is a long plaintext description of the advisory"
    description: String!
    "The GitHub Security Advisory ID"
    ghsaId: String!
    id: ID!
    "A list of identifiers for this advisory"
    identifiers: [GitHub_SecurityAdvisoryIdentifier!]!
    "The organization that originated the advisory"
    origin: String!
    "When the advisory was published"
    publishedAt: GitHub_DateTime!
    "A list of references for this advisory"
    references: [GitHub_SecurityAdvisoryReference!]!
    "The severity of the advisory"
    severity: GitHub_SecurityAdvisorySeverity!
    "A short plaintext summary of the advisory"
    summary: String!
    "When the advisory was last updated"
    updatedAt: GitHub_DateTime!
    "Vulnerabilities associated with this Advisory"
    vulnerabilities(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #An ecosystem to filter vulnerabilities by.
        ecosystem: GitHub_SecurityAdvisoryEcosystem,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for the returned topics.
        orderBy: GitHub_SecurityVulnerabilityOrder,
        #A package name to filter vulnerabilities by.
        package: String,
        #A list of severities to filter vulnerabilities by.
        severities: [GitHub_SecurityAdvisorySeverity!]
    ): GitHub_SecurityVulnerabilityConnection!
    "When the advisory was withdrawn, if it has been withdrawn"
    withdrawnAt: GitHub_DateTime
}

"The connection type for SecurityAdvisory."
type GitHub_SecurityAdvisoryConnection {
    "A list of edges."
    edges: [GitHub_SecurityAdvisoryEdge]
    "A list of nodes."
    nodes: [GitHub_SecurityAdvisory]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_SecurityAdvisoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_SecurityAdvisory
}

"A GitHub Security Advisory Identifier"
type GitHub_SecurityAdvisoryIdentifier {
    "The identifier type, e.g. GHSA, CVE"
    type: String!
    "The identifier"
    value: String!
}

"An individual package"
type GitHub_SecurityAdvisoryPackage {
    "The ecosystem the package belongs to, e.g. RUBYGEMS, NPM"
    ecosystem: GitHub_SecurityAdvisoryEcosystem!
    "The package name"
    name: String!
}

"An individual package version"
type GitHub_SecurityAdvisoryPackageVersion {
    "The package name or version"
    identifier: String!
}

"A GitHub Security Advisory Reference"
type GitHub_SecurityAdvisoryReference {
    "A publicly accessible reference"
    url: GitHub_URI!
}

"An individual vulnerability within an Advisory"
type GitHub_SecurityVulnerability {
    "The Advisory associated with this Vulnerability"
    advisory: GitHub_SecurityAdvisory!
    "The first version containing a fix for the vulnerability"
    firstPatchedVersion: GitHub_SecurityAdvisoryPackageVersion
    "A description of the vulnerable package"
    package: GitHub_SecurityAdvisoryPackage!
    "The severity of the vulnerability within this package"
    severity: GitHub_SecurityAdvisorySeverity!
    "When the vulnerability was last updated"
    updatedAt: GitHub_DateTime!
    """
    A string that describes the vulnerable package versions.
    This string follows a basic syntax with a few forms.
    + `= 0.2.0` denotes a single vulnerable version.
    + `<= 1.0.8` denotes a version range up to and including the specified version
    + `< 0.1.11` denotes a version range up to, but excluding, the specified version
    + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
    + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
    """
    vulnerableVersionRange: String!
}

"The connection type for SecurityVulnerability."
type GitHub_SecurityVulnerabilityConnection {
    "A list of edges."
    edges: [GitHub_SecurityVulnerabilityEdge]
    "A list of nodes."
    nodes: [GitHub_SecurityVulnerability]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_SecurityVulnerabilityEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_SecurityVulnerability
}

"Represents an S/MIME signature on a Commit or Tag."
type GitHub_SmimeSignature implements GitHub_GitSignature {
    "Email used to sign this object."
    email: String!
    "True if the signature is valid and verified by GitHub."
    isValid: Boolean!
    "Payload for GPG signing object. Raw ODB object without the signature header."
    payload: String!
    "ASCII-armored signature header from object."
    signature: String!
    "GitHub user corresponding to the email signing this commit."
    signer: GitHub_User
    """
    The state of this signature. `VALID` if signature is valid and verified by
    GitHub, otherwise represents reason why signature is considered invalid.
    """
    state: GitHub_GitSignatureState!
    "True if the signature was made with GitHub's signing key."
    wasSignedByGitHub: Boolean!
}

"The connection type for User."
type GitHub_StargazerConnection {
    "A list of edges."
    edges: [GitHub_StargazerEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a user that's starred a repository."
type GitHub_StargazerEdge {
    "A cursor for use in pagination."
    cursor: String!
    node: GitHub_User!
    "Identifies when the item was starred."
    starredAt: GitHub_DateTime!
}

"The connection type for Repository."
type GitHub_StarredRepositoryConnection {
    "A list of edges."
    edges: [GitHub_StarredRepositoryEdge]
    "A list of nodes."
    nodes: [GitHub_Repository]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a starred repository."
type GitHub_StarredRepositoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    node: GitHub_Repository!
    "Identifies when the item was starred."
    starredAt: GitHub_DateTime!
}

"Represents a commit status."
type GitHub_Status implements GitHub_Node {
    "The commit this status is attached to."
    commit: GitHub_Commit
    "Looks up an individual status context by context name."
    context(
        #The context name.
        name: String!
    ): GitHub_StatusContext
    "The individual status contexts for this commit."
    contexts: [GitHub_StatusContext!]!
    id: ID!
    "The combined commit status."
    state: GitHub_StatusState!
}

"Represents an individual commit status context"
type GitHub_StatusContext implements GitHub_Node {
    "This commit this status context is attached to."
    commit: GitHub_Commit
    "The name of this status context."
    context: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The actor who created this status context."
    creator: GitHub_Actor
    "The description for this status context."
    description: String
    id: ID!
    "The state of this status context."
    state: GitHub_StatusState!
    "The URL for this status context."
    targetUrl: GitHub_URI
}

"Autogenerated return type of SubmitPullRequestReview"
type GitHub_SubmitPullRequestReviewPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The submitted pull request review."
    pullRequestReview: GitHub_PullRequestReview
}

"Represents a 'subscribed' event on a given `Subscribable`."
type GitHub_SubscribedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Object referenced by event."
    subscribable: GitHub_Subscribable!
}

"A suggestion to review a pull request based on a user's commit history and review comments."
type GitHub_SuggestedReviewer {
    "Is this suggestion based on past commits?"
    isAuthor: Boolean!
    "Is this suggestion based on past review comments?"
    isCommenter: Boolean!
    "Identifies the user suggested to review the pull request."
    reviewer: GitHub_User!
}

"Represents a Git tag."
type GitHub_Tag implements GitHub_GitObject & GitHub_Node {
    "An abbreviated version of the Git object ID"
    abbreviatedOid: String!
    "The HTTP path for this Git object"
    commitResourcePath: GitHub_URI!
    "The HTTP URL for this Git object"
    commitUrl: GitHub_URI!
    id: ID!
    "The Git tag message."
    message: String
    "The Git tag name."
    name: String!
    "The Git object ID"
    oid: GitHub_GitObjectID!
    "The Repository the Git object belongs to"
    repository: GitHub_Repository!
    "Details about the tag author."
    tagger: GitHub_GitActor
    "The Git object the tag points to."
    target: GitHub_GitObject!
}

"A team of users in an organization."
type GitHub_Team implements GitHub_MemberStatusable & GitHub_Node & GitHub_Subscribable {
    "A list of teams that are ancestors of this team."
    ancestors(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_TeamConnection!
    "A URL pointing to the team's avatar."
    avatarUrl(
        #The size in pixels of the resulting square image.
        size: Int = 400
    ): GitHub_URI
    "List of child teams belonging to this team"
    childTeams(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Whether to list immediate child teams or all descendant child teams.
        immediateOnly: Boolean = true,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_TeamOrder,
        #User logins to filter by
        userLogins: [String!]
    ): GitHub_TeamConnection!
    "The slug corresponding to the organization and team."
    combinedSlug: String!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The description of the team."
    description: String
    "The HTTP path for editing this team"
    editTeamResourcePath: GitHub_URI!
    "The HTTP URL for editing this team"
    editTeamUrl: GitHub_URI!
    id: ID!
    "A list of pending invitations for users to this team"
    invitations(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_OrganizationInvitationConnection
    "Get the status messages members of this entity have set that are either public or visible only to the organization."
    memberStatuses(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for user statuses returned from the connection.
        orderBy: GitHub_UserStatusOrder
    ): GitHub_UserStatusConnection!
    "A list of users who are members of this team."
    members(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter by membership type
        membership: GitHub_TeamMembershipType = ALL,
        #Order for the connection.
        orderBy: GitHub_TeamMemberOrder,
        #The search string to look for.
        query: String,
        #Filter by team member role
        role: GitHub_TeamMemberRole
    ): GitHub_TeamMemberConnection!
    "The HTTP path for the team' members"
    membersResourcePath: GitHub_URI!
    "The HTTP URL for the team' members"
    membersUrl: GitHub_URI!
    "The name of the team."
    name: String!
    "The HTTP path creating a new team"
    newTeamResourcePath: GitHub_URI!
    "The HTTP URL creating a new team"
    newTeamUrl: GitHub_URI!
    "The organization that owns this team."
    organization: GitHub_Organization!
    "The parent team of the team."
    parentTeam: GitHub_Team
    "The level of privacy the team has."
    privacy: GitHub_TeamPrivacy!
    "A list of repositories this team has access to."
    repositories(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for the connection.
        orderBy: GitHub_TeamRepositoryOrder,
        #The search string to look for.
        query: String
    ): GitHub_TeamRepositoryConnection!
    "The HTTP path for this team's repositories"
    repositoriesResourcePath: GitHub_URI!
    "The HTTP URL for this team's repositories"
    repositoriesUrl: GitHub_URI!
    "The HTTP path for this team"
    resourcePath: GitHub_URI!
    "The slug corresponding to the team."
    slug: String!
    "The HTTP path for this team's teams"
    teamsResourcePath: GitHub_URI!
    "The HTTP URL for this team's teams"
    teamsUrl: GitHub_URI!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this team"
    url: GitHub_URI!
    "Team is adminable by the viewer."
    viewerCanAdminister: Boolean!
    "Check if the viewer is able to change their subscription status for the repository."
    viewerCanSubscribe: Boolean!
    "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
    viewerSubscription: GitHub_SubscriptionState
}

"The connection type for Team."
type GitHub_TeamConnection {
    "A list of edges."
    edges: [GitHub_TeamEdge]
    "A list of nodes."
    nodes: [GitHub_Team]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_TeamEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Team
}

"The connection type for User."
type GitHub_TeamMemberConnection {
    "A list of edges."
    edges: [GitHub_TeamMemberEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a user who is a member of a team."
type GitHub_TeamMemberEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The HTTP path to the organization's member access page."
    memberAccessResourcePath: GitHub_URI!
    "The HTTP URL to the organization's member access page."
    memberAccessUrl: GitHub_URI!
    node: GitHub_User!
    "The role the member has on the team."
    role: GitHub_TeamMemberRole!
}

"The connection type for Repository."
type GitHub_TeamRepositoryConnection {
    "A list of edges."
    edges: [GitHub_TeamRepositoryEdge]
    "A list of nodes."
    nodes: [GitHub_Repository]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"Represents a team repository."
type GitHub_TeamRepositoryEdge {
    "A cursor for use in pagination."
    cursor: String!
    node: GitHub_Repository!
    "The permission level the team has on the repository"
    permission: GitHub_RepositoryPermission!
}

"A text match within a search result."
type GitHub_TextMatch {
    "The specific text fragment within the property matched on."
    fragment: String!
    "Highlights within the matched fragment."
    highlights: [GitHub_TextMatchHighlight!]!
    "The property matched on."
    property: String!
}

"Represents a single highlight in a search result match."
type GitHub_TextMatchHighlight {
    "The indice in the fragment where the matched text begins."
    beginIndice: Int!
    "The indice in the fragment where the matched text ends."
    endIndice: Int!
    "The text matched."
    text: String!
}

"A topic aggregates entities that are related to a subject."
type GitHub_Topic implements GitHub_Node & GitHub_Starrable {
    id: ID!
    "The topic's name."
    name: String!
    """
    A list of related topics, including aliases of this topic, sorted with the most relevant
    first. Returns up to 10 Topics.
    """
    relatedTopics(
        #How many topics to return.
        first: Int = 3
    ): [GitHub_Topic!]!
    "A list of users who have starred this starrable."
    stargazers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_StarOrder
    ): GitHub_StargazerConnection!
    "Returns a boolean indicating whether the viewing user has starred this starrable."
    viewerHasStarred: Boolean!
}

"The connection type for Topic."
type GitHub_TopicConnection {
    "A list of edges."
    edges: [GitHub_TopicEdge]
    "A list of nodes."
    nodes: [GitHub_Topic]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_TopicEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_Topic
}

"Represents a 'transferred' event on a given issue or pull request."
type GitHub_TransferredEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "The repository this came from"
    fromRepository: GitHub_Repository
    id: ID!
    "Identifies the issue associated with the event."
    issue: GitHub_Issue!
}

"Represents a Git tree."
type GitHub_Tree implements GitHub_GitObject & GitHub_Node {
    "An abbreviated version of the Git object ID"
    abbreviatedOid: String!
    "The HTTP path for this Git object"
    commitResourcePath: GitHub_URI!
    "The HTTP URL for this Git object"
    commitUrl: GitHub_URI!
    "A list of tree entries."
    entries: [GitHub_TreeEntry!]
    id: ID!
    "The Git object ID"
    oid: GitHub_GitObjectID!
    "The Repository the Git object belongs to"
    repository: GitHub_Repository!
}

"Represents a Git tree entry."
type GitHub_TreeEntry {
    "Entry file mode."
    mode: Int!
    "Entry file name."
    name: String!
    "Entry file object."
    object: GitHub_GitObject
    "Entry file Git object ID."
    oid: GitHub_GitObjectID!
    "The Repository the tree entry belongs to"
    repository: GitHub_Repository!
    "Entry file type."
    type: String!
}

"Represents an 'unassigned' event on any assignable object."
type GitHub_UnassignedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the assignable associated with the event."
    assignable: GitHub_Assignable!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the subject (user) who was unassigned."
    user: GitHub_User
}

"Represents an unknown signature on a Commit or Tag."
type GitHub_UnknownSignature implements GitHub_GitSignature {
    "Email used to sign this object."
    email: String!
    "True if the signature is valid and verified by GitHub."
    isValid: Boolean!
    "Payload for GPG signing object. Raw ODB object without the signature header."
    payload: String!
    "ASCII-armored signature header from object."
    signature: String!
    "GitHub user corresponding to the email signing this commit."
    signer: GitHub_User
    """
    The state of this signature. `VALID` if signature is valid and verified by
    GitHub, otherwise represents reason why signature is considered invalid.
    """
    state: GitHub_GitSignatureState!
    "True if the signature was made with GitHub's signing key."
    wasSignedByGitHub: Boolean!
}

"Represents an 'unlabeled' event on a given issue or pull request."
type GitHub_UnlabeledEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the label associated with the 'unlabeled' event."
    label: GitHub_Label!
    "Identifies the `Labelable` associated with the event."
    labelable: GitHub_Labelable!
}

"Autogenerated return type of UnlockLockable"
type GitHub_UnlockLockablePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The item that was unlocked."
    unlockedRecord: GitHub_Lockable
}

"Represents an 'unlocked' event on a given issue or pull request."
type GitHub_UnlockedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Object that was unlocked."
    lockable: GitHub_Lockable!
}

"Autogenerated return type of UnmarkIssueAsDuplicate"
type GitHub_UnmarkIssueAsDuplicatePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The issue or pull request that was marked as a duplicate."
    duplicate: GitHub_IssueOrPullRequest
}

"Represents an 'unpinned' event on a given issue or pull request."
type GitHub_UnpinnedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Identifies the issue associated with the event."
    issue: GitHub_Issue!
}

"Autogenerated return type of UnresolveReviewThread"
type GitHub_UnresolveReviewThreadPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The thread to resolve."
    thread: GitHub_PullRequestReviewThread
}

"Represents an 'unsubscribed' event on a given `Subscribable`."
type GitHub_UnsubscribedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "Object referenced by event."
    subscribable: GitHub_Subscribable!
}

"Autogenerated return type of UpdateBranchProtectionRule"
type GitHub_UpdateBranchProtectionRulePayload {
    "The newly created BranchProtectionRule."
    branchProtectionRule: GitHub_BranchProtectionRule
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated return type of UpdateIssueComment"
type GitHub_UpdateIssueCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated comment."
    issueComment: GitHub_IssueComment
}

"Autogenerated return type of UpdateIssue"
type GitHub_UpdateIssuePayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The issue."
    issue: GitHub_Issue
}

"Autogenerated return type of UpdateProjectCard"
type GitHub_UpdateProjectCardPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated ProjectCard."
    projectCard: GitHub_ProjectCard
}

"Autogenerated return type of UpdateProjectColumn"
type GitHub_UpdateProjectColumnPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated project column."
    projectColumn: GitHub_ProjectColumn
}

"Autogenerated return type of UpdateProject"
type GitHub_UpdateProjectPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated project."
    project: GitHub_Project
}

"Autogenerated return type of UpdatePullRequest"
type GitHub_UpdatePullRequestPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated pull request."
    pullRequest: GitHub_PullRequest
}

"Autogenerated return type of UpdatePullRequestReviewComment"
type GitHub_UpdatePullRequestReviewCommentPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated comment."
    pullRequestReviewComment: GitHub_PullRequestReviewComment
}

"Autogenerated return type of UpdatePullRequestReview"
type GitHub_UpdatePullRequestReviewPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The updated pull request review."
    pullRequestReview: GitHub_PullRequestReview
}

"Autogenerated return type of UpdateSubscription"
type GitHub_UpdateSubscriptionPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The input subscribable entity."
    subscribable: GitHub_Subscribable
}

"Autogenerated return type of UpdateTopics"
type GitHub_UpdateTopicsPayload {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Names of the provided topics that are not valid."
    invalidTopicNames: [String!]
    "The updated repository."
    repository: GitHub_Repository
}

"A user is an individual's account on GitHub that owns repositories and can make new content."
type GitHub_User implements GitHub_Actor & GitHub_Node & GitHub_ProfileOwner & GitHub_ProjectOwner & GitHub_RegistryPackageOwner & GitHub_RegistryPackageSearch & GitHub_RepositoryOwner & GitHub_UniformResourceLocatable {
    "Determine if this repository owner has any items that can be pinned to their profile."
    anyPinnableItems(
        #Filter to only a particular kind of pinnable item.
        type: GitHub_PinnableItemType
    ): Boolean!
    "A URL pointing to the user's public avatar."
    avatarUrl(
        #The size of the resulting square image.
        size: Int
    ): GitHub_URI!
    "The user's public profile bio."
    bio: String
    "The user's public profile bio as HTML."
    bioHTML: GitHub_HTML!
    "A list of commit comments made by this user."
    commitComments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_CommitCommentConnection!
    "The user's public profile company."
    company: String
    "The user's public profile company as HTML."
    companyHTML: GitHub_HTML!
    "The collection of contributions this user has made to different repositories."
    contributionsCollection(
        #Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
        from: GitHub_DateTime,
        #The ID of the organization used to filter contributions.
        organizationID: ID,
        """

        Only contributions made before and up to and including this time will be
        counted. If omitted, defaults to the current time.
        """
        to: GitHub_DateTime
    ): GitHub_ContributionsCollection!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the primary key from the database."
    databaseId: Int
    "The user's publicly visible profile email."
    email: String!
    "A list of users the given user is followed by."
    followers(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_FollowerConnection!
    "A list of users the given user is following."
    following(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_FollowingConnection!
    "Find gist by repo name."
    gist(
        #The gist name to find.
        name: String!
    ): GitHub_Gist
    "A list of gist comments made by this user."
    gistComments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_GistCommentConnection!
    "A list of the Gists the user has created."
    gists(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for gists returned from the connection
        orderBy: GitHub_GistOrder,
        #Filters Gists according to privacy.
        privacy: GitHub_GistPrivacy
    ): GitHub_GistConnection!
    id: ID!
    "Whether or not this user is a participant in the GitHub Security Bug Bounty."
    isBountyHunter: Boolean!
    "Whether or not this user is a participant in the GitHub Campus Experts Program."
    isCampusExpert: Boolean!
    "Whether or not this user is a GitHub Developer Program member."
    isDeveloperProgramMember: Boolean!
    "Whether or not this user is a GitHub employee."
    isEmployee: Boolean!
    "Whether or not the user has marked themselves as for hire."
    isHireable: Boolean!
    "Whether or not this user is a site administrator."
    isSiteAdmin: Boolean!
    "Whether or not this user is the viewing user."
    isViewer: Boolean!
    "A list of issue comments made by this user."
    issueComments(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_IssueCommentConnection!
    "A list of issues associated with this user."
    issues(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Filtering options for issues returned from the connection.
        filterBy: GitHub_IssueFilters,
        #Returns the first _n_ elements from the list.
        first: Int,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for issues returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the issues by.
        states: [GitHub_IssueState!]
    ): GitHub_IssueConnection!
    """
    Showcases a selection of repositories and gists that the profile owner has
    either curated or that have been selected automatically based on popularity.
    """
    itemShowcase: GitHub_ProfileItemShowcase!
    "The user's public profile location."
    location: String
    "The username used to login."
    login: String!
    "The user's public profile name."
    name: String
    "Find an organization by its login that the user belongs to."
    organization(
        #The login of the organization to find.
        login: String!
    ): GitHub_Organization
    "A list of organizations the user belongs to."
    organizations(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_OrganizationConnection!
    "A list of repositories and gists this profile owner can pin to their profile."
    pinnableItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinnable items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "A list of repositories and gists this profile owner has pinned to their profile"
    pinnedItems(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Filter the types of pinned items that are returned.
        types: [GitHub_PinnableItemType!]
    ): GitHub_PinnableItemConnection!
    "Returns how many more items this profile owner can pin to their profile."
    pinnedItemsRemaining: Int!
    "A list of repositories this user has pinned to their profile"
    pinnedRepositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection! @deprecated(reason : "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-07-01 UTC.")
    "Find project by number."
    project(
        #The project number to find.
        number: Int!
    ): GitHub_Project
    "A list of projects under the owner."
    projects(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for projects returned from the connection
        orderBy: GitHub_ProjectOrder,
        #Query to search projects by, currently only searching by name.
        search: String,
        #A list of states to filter the projects by.
        states: [GitHub_ProjectState!]
    ): GitHub_ProjectConnection!
    "The HTTP path listing user's projects"
    projectsResourcePath: GitHub_URI!
    "The HTTP URL listing user's projects"
    projectsUrl: GitHub_URI!
    "A list of public keys associated with this user."
    publicKeys(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int
    ): GitHub_PublicKeyConnection!
    "A list of pull requests associated with this user."
    pullRequests(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #The base ref name to filter the pull requests by.
        baseRefName: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #The head ref name to filter the pull requests by.
        headRefName: String,
        #A list of label names to filter the pull requests by.
        labels: [String!],
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for pull requests returned from the connection.
        orderBy: GitHub_IssueOrder,
        #A list of states to filter the pull requests by.
        states: [GitHub_PullRequestState!]
    ): GitHub_PullRequestConnection!
    "A list of repositories that the user owns."
    repositories(
        """

        Array of viewer's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        current viewer owns.
        """
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they are forks of another repository
        isFork: Boolean,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "A list of repositories that the user recently contributed to."
    repositoriesContributedTo(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        """

        If non-null, include only the specified types of contributions. The
        GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
        """
        contributionTypes: [GitHub_RepositoryContributionType],
        #Returns the first _n_ elements from the list.
        first: Int,
        #If true, include user repositories
        includeUserRepositories: Boolean,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "Find Repository."
    repository(
        #Name of Repository to find.
        name: String!
    ): GitHub_Repository
    "The HTTP path for this user"
    resourcePath: GitHub_URI!
    "Repositories the user has starred."
    starredRepositories(
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Order for connection
        orderBy: GitHub_StarOrder,
        #Filters starred repositories to only return repositories owned by the viewer.
        ownedByViewer: Boolean
    ): GitHub_StarredRepositoryConnection!
    "The user's description of what they're currently doing."
    status: GitHub_UserStatus
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The HTTP URL for this user"
    url: GitHub_URI!
    "Can the viewer pin repositories and gists to the profile?"
    viewerCanChangePinnedItems: Boolean!
    "Can the current viewer create new projects on this owner."
    viewerCanCreateProjects: Boolean!
    "Whether or not the viewer is able to follow the user."
    viewerCanFollow: Boolean!
    "Whether or not this user is followed by the viewer."
    viewerIsFollowing: Boolean!
    "A list of repositories the given user is watching."
    watching(
        #Affiliation options for repositories returned from the connection
        affiliations: [GitHub_RepositoryAffiliation],
        #Returns the elements in the list that come after the specified cursor.
        after: String,
        #Returns the elements in the list that come before the specified cursor.
        before: String,
        #Returns the first _n_ elements from the list.
        first: Int,
        #If non-null, filters repositories according to whether they have been locked
        isLocked: Boolean,
        #Returns the last _n_ elements from the list.
        last: Int,
        #Ordering options for repositories returned from the connection
        orderBy: GitHub_RepositoryOrder,
        """

        Array of owner's affiliation options for repositories returned from the
        connection. For example, OWNER will include only repositories that the
        organization or user being viewed owns.
        """
        ownerAffiliations: [GitHub_RepositoryAffiliation],
        #If non-null, filters repositories according to privacy
        privacy: GitHub_RepositoryPrivacy
    ): GitHub_RepositoryConnection!
    "A URL pointing to the user's public website/blog."
    websiteUrl: GitHub_URI
}

"Represents a 'user_blocked' event on a given user."
type GitHub_UserBlockedEvent implements GitHub_Node {
    "Identifies the actor who performed the event."
    actor: GitHub_Actor
    "Number of days that the user was blocked for."
    blockDuration: GitHub_UserBlockDuration!
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    id: ID!
    "The user who was blocked."
    subject: GitHub_User
}

"The connection type for User."
type GitHub_UserConnection {
    "A list of edges."
    edges: [GitHub_UserEdge]
    "A list of nodes."
    nodes: [GitHub_User]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edit on user content"
type GitHub_UserContentEdit implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "Identifies the date and time when the object was deleted."
    deletedAt: GitHub_DateTime
    "The actor who deleted this content"
    deletedBy: GitHub_Actor
    "A summary of the changes for this edit"
    diff: String
    "When this content was edited"
    editedAt: GitHub_DateTime!
    "The actor who edited this content"
    editor: GitHub_Actor
    id: ID!
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
}

"A list of edits to content."
type GitHub_UserContentEditConnection {
    "A list of edges."
    edges: [GitHub_UserContentEditEdge]
    "A list of nodes."
    nodes: [GitHub_UserContentEdit]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_UserContentEditEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_UserContentEdit
}

"Represents a user."
type GitHub_UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_User
}

"The user's description of what they're currently doing."
type GitHub_UserStatus implements GitHub_Node {
    "Identifies the date and time when the object was created."
    createdAt: GitHub_DateTime!
    "An emoji summarizing the user's status."
    emoji: String
    "ID of the object."
    id: ID!
    "Whether this status indicates the user is not fully available on GitHub."
    indicatesLimitedAvailability: Boolean!
    "A brief message describing what the user is doing."
    message: String
    "The organization whose members can see this status. If null, this status is publicly visible."
    organization: GitHub_Organization
    "Identifies the date and time when the object was last updated."
    updatedAt: GitHub_DateTime!
    "The user who has this status."
    user: GitHub_User!
}

"The connection type for UserStatus."
type GitHub_UserStatusConnection {
    "A list of edges."
    edges: [GitHub_UserStatusEdge]
    "A list of nodes."
    nodes: [GitHub_UserStatus]
    "Information to aid in pagination."
    pageInfo: GitHub_PageInfo!
    "Identifies the total count of items in the connection."
    totalCount: Int!
}

"An edge in a connection."
type GitHub_UserStatusEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: GitHub_UserStatus
}

type GraphQLSource implements Node {
    children: [Node!]!
    fieldName: String
    id: ID!
    internal: Internal!
    parent: Node
    typeName: String
}

type GraphQLSourceConnection {
    distinct(field: GraphQLSourceFieldsEnum!): [String!]!
    edges: [GraphQLSourceEdge!]!
    group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSourceEdge {
    next: GraphQLSource
    node: GraphQLSource!
    previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
    edges: [GraphQLSourceEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace
    ): ImageSharpFluid
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpResize
    resolutions(base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
    sizes(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace
    ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float
    originalName: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float
}

type ImageSharpFluid {
    aspectRatio: Float
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int
    presentationWidth: Int
    sizes: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImageSharpResolutions {
    aspectRatio: Float
    base64: String
    height: Float
    originalName: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float
}

type ImageSharpSizes {
    aspectRatio: Float
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int
    presentationWidth: Int
    sizes: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type JobsYaml implements Node {
    children: [Node!]!
    company: String
    dates: String
    details: String
    id: ID!
    internal: Internal!
    isCurrent: Boolean
    link: String
    parent: Node
    tags: [String]
    title: String
}

type JobsYamlConnection {
    distinct(field: JobsYamlFieldsEnum!): [String!]!
    edges: [JobsYamlEdge!]!
    group(field: JobsYamlFieldsEnum!, limit: Int, skip: Int): [JobsYamlGroupConnection!]!
    nodes: [JobsYaml!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type JobsYamlEdge {
    next: JobsYaml
    node: JobsYaml!
    previous: JobsYaml
}

type JobsYamlGroupConnection {
    edges: [JobsYamlEdge!]!
    field: String!
    fieldValue: String
    nodes: [JobsYaml!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type MarkdownHeading {
    depth: Int
    value: String
}

type MarkdownRemark implements Node {
    children: [Node!]!
    excerpt(format: ExcerptFormats = PLAIN, pruneLength: Int = 140, truncate: Boolean = false): String
    excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
    fields: MarkdownRemarkFields
    fileAbsolutePath: String
    frontmatter: MarkdownRemarkFrontmatter
    headings(depth: HeadingLevels): [MarkdownHeading]
    html: String
    htmlAst: JSON
    id: ID!
    internal: Internal!
    parent: Node
    rawMarkdownBody: String
    tableOfContents(heading: String, maxDepth: Int, pathToSlugField: String = "fields.slug"): String
    timeToRead: Int
    wordCount: wordCount
}

type MarkdownRemarkConnection {
    distinct(field: MarkdownRemarkFieldsEnum!): [String!]!
    edges: [MarkdownRemarkEdge!]!
    group(field: MarkdownRemarkFieldsEnum!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
    nodes: [MarkdownRemark!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type MarkdownRemarkEdge {
    next: MarkdownRemark
    node: MarkdownRemark!
    previous: MarkdownRemark
}

type MarkdownRemarkFields {
    slug: String
}

type MarkdownRemarkFrontmatter {
    date(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    description: String
    hidden: Boolean
    kind: String
    repository: MarkdownRemarkFrontmatterRepository
    tags: [String]
    title: String
    url: String
}

type MarkdownRemarkFrontmatterRepository {
    name: String
    owner: String
}

type MarkdownRemarkGroupConnection {
    edges: [MarkdownRemarkEdge!]!
    field: String!
    fieldValue: String
    nodes: [MarkdownRemark!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
}

type ProjectsYaml implements Node {
    children: [Node!]!
    description: String
    id: ID!
    internal: Internal!
    live: String
    more: String
    name: String
    parent: Node
    repository: ProjectsYamlRepository
    tags: [String]
}

type ProjectsYamlConnection {
    distinct(field: ProjectsYamlFieldsEnum!): [String!]!
    edges: [ProjectsYamlEdge!]!
    group(field: ProjectsYamlFieldsEnum!, limit: Int, skip: Int): [ProjectsYamlGroupConnection!]!
    nodes: [ProjectsYaml!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProjectsYamlEdge {
    next: ProjectsYaml
    node: ProjectsYaml!
    previous: ProjectsYaml
}

type ProjectsYamlGroupConnection {
    edges: [ProjectsYamlEdge!]!
    field: String!
    fieldValue: String
    nodes: [ProjectsYaml!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProjectsYamlRepository {
    name: String
    owner: String
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection
    allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection
    allJobsYaml(filter: JobsYamlFilterInput, limit: Int, skip: Int, sort: JobsYamlSortInput): JobsYamlConnection
    allMarkdownRemark(filter: MarkdownRemarkFilterInput, limit: Int, skip: Int, sort: MarkdownRemarkSortInput): MarkdownRemarkConnection
    allProjectsYaml(filter: ProjectsYamlFilterInput, limit: Int, skip: Int, sort: ProjectsYamlSortInput): ProjectsYamlConnection
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: IntQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: IntQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    github: GitHub
    graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput, resolutions: ImageSharpResolutionsFilterInput, sizes: ImageSharpSizesFilterInput): ImageSharp
    jobsYaml(children: NodeFilterListInput, company: StringQueryOperatorInput, dates: StringQueryOperatorInput, details: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isCurrent: BooleanQueryOperatorInput, link: StringQueryOperatorInput, parent: NodeFilterInput, tags: StringQueryOperatorInput, title: StringQueryOperatorInput): JobsYaml
    markdownRemark(children: NodeFilterListInput, excerpt: StringQueryOperatorInput, excerptAst: JSONQueryOperatorInput, fields: MarkdownRemarkFieldsFilterInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: MarkdownRemarkFrontmatterFilterInput, headings: MarkdownHeadingFilterListInput, html: StringQueryOperatorInput, htmlAst: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, rawMarkdownBody: StringQueryOperatorInput, tableOfContents: StringQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: wordCountFilterInput): MarkdownRemark
    projectsYaml(children: NodeFilterListInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, live: StringQueryOperatorInput, more: StringQueryOperatorInput, name: StringQueryOperatorInput, parent: NodeFilterInput, repository: ProjectsYamlRepositoryFilterInput, tags: StringQueryOperatorInput): ProjectsYaml
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, context: SitePageContextFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, jsonName: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
    buildTime(
        #Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
        difference: String,
        #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
        formatString: String,
        #Returns a string generated with Moment.js' `fromNow` function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String
    componentChunkName: String
    componentPath: String
    context: SitePageContext
    id: ID!
    internal: Internal!
    internalComponentName: String
    isCreatedByStatefulCreatePages: Boolean
    jsonName: String
    parent: Node
    path: String
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePageContext {
    repoName: String
    repoOwner: String
    slug: String
    tag: String
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    author: String
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    background_color: String
    display: String
    fieldName: String
    headers: SitePluginPluginOptionsHeaders
    icon: String
    maxWidth: Int
    name: String
    path: String
    pathCheck: Boolean
    pathToConfigModule: String
    plugins: [SitePluginPluginOptionsPlugins]
    short_name: String
    start_url: String
    theme_color: String
    typeName: String
    url: String
    wrapperStyle: String
}

type SitePluginPluginOptionsHeaders {
    Authorization: String
}

type SitePluginPluginOptionsPlugins {
    id: String
    name: String
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptionsPluginsPluginOptions
    resolve: String
    version: String
}

type SitePluginPluginOptionsPluginsPluginOptions {
    maxWidth: Int
    wrapperStyle: String
}

type SiteSiteMetadata {
    author: String
    description: String
    siteUrl: String
    title: String
}

type wordCount {
    paragraphs: Int
    sentences: Int
    words: Int
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum ExcerptFormats {
    HTML
    PLAIN
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

"Collaborators affiliation level with a subject."
enum GitHub_CollaboratorAffiliation {
    #All collaborators the authenticated user can see.
    ALL
    #All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
    DIRECT
    #All outside collaborators of an organization-owned subject.
    OUTSIDE
}

"A comment author association with repository."
enum GitHub_CommentAuthorAssociation {
    #Author has been invited to collaborate on the repository.
    COLLABORATOR
    #Author has previously committed to the repository.
    CONTRIBUTOR
    #Author has not previously committed to GitHub.
    FIRST_TIMER
    #Author has not previously committed to the repository.
    FIRST_TIME_CONTRIBUTOR
    #Author is a member of the organization that owns the repository.
    MEMBER
    #Author has no association with the repository.
    NONE
    #Author is the owner of the repository.
    OWNER
}

"The possible errors that will prevent a user from updating a comment."
enum GitHub_CommentCannotUpdateReason {
    #You cannot update this comment
    DENIED
    #You must be the author or have write access to this repository to update this comment.
    INSUFFICIENT_ACCESS
    #Unable to create comment because issue is locked.
    LOCKED
    #You must be logged in to update this comment.
    LOGIN_REQUIRED
    #Repository is under maintenance.
    MAINTENANCE
    #At least one email address must be verified to update this comment.
    VERIFIED_EMAIL_REQUIRED
}

"Properties by which commit contribution connections can be ordered."
enum GitHub_CommitContributionOrderField {
    #Order commit contributions by how many commits they represent.
    COMMIT_COUNT
    #Order commit contributions by when they were made.
    OCCURRED_AT
}

"Properties by which contribution connections can be ordered."
enum GitHub_ContributionOrderField {
    #Order contributions by when they were made.
    OCCURRED_AT
}

"The possible default permissions for repositories."
enum GitHub_DefaultRepositoryPermissionField {
    #Can read, write, and administrate repos by default
    ADMIN
    #No access
    NONE
    #Can read repos by default
    READ
    #Can read and write repos by default
    WRITE
}

"Properties by which deployment connections can be ordered."
enum GitHub_DeploymentOrderField {
    #Order collection by creation time
    CREATED_AT
}

"The possible states in which a deployment can be."
enum GitHub_DeploymentState {
    #The pending deployment was not updated after 30 minutes.
    ABANDONED
    #The deployment is currently active.
    ACTIVE
    #An inactive transient deployment.
    DESTROYED
    #The deployment experienced an error.
    ERROR
    #The deployment has failed.
    FAILURE
    #The deployment is inactive.
    INACTIVE
    #The deployment is in progress.
    IN_PROGRESS
    #The deployment is pending.
    PENDING
    #The deployment has queued
    QUEUED
}

"The possible states for a deployment status."
enum GitHub_DeploymentStatusState {
    #The deployment experienced an error.
    ERROR
    #The deployment has failed.
    FAILURE
    #The deployment is inactive.
    INACTIVE
    #The deployment is in progress.
    IN_PROGRESS
    #The deployment is pending.
    PENDING
    #The deployment is queued
    QUEUED
    #The deployment was successful.
    SUCCESS
}

"Properties by which gist connections can be ordered."
enum GitHub_GistOrderField {
    #Order gists by creation time
    CREATED_AT
    #Order gists by push time
    PUSHED_AT
    #Order gists by update time
    UPDATED_AT
}

"The privacy of a Gist"
enum GitHub_GistPrivacy {
    #Gists that are public and secret
    ALL
    #Public
    PUBLIC
    #Secret
    SECRET
}

"The state of a Git signature."
enum GitHub_GitSignatureState {
    #The signing certificate or its chain could not be verified
    BAD_CERT
    #Invalid email used for signing
    BAD_EMAIL
    #Signing key expired
    EXPIRED_KEY
    #Internal error - the GPG verification service misbehaved
    GPGVERIFY_ERROR
    #Internal error - the GPG verification service is unavailable at the moment
    GPGVERIFY_UNAVAILABLE
    #Invalid signature
    INVALID
    #Malformed signature
    MALFORMED_SIG
    #The usage flags for the key that signed this don't allow signing
    NOT_SIGNING_KEY
    #Email used for signing not known to GitHub
    NO_USER
    #Valid siganture, though certificate revocation check failed
    OCSP_ERROR
    #Valid signature, pending certificate revocation checking
    OCSP_PENDING
    #One or more certificates in chain has been revoked
    OCSP_REVOKED
    #Key used for signing not known to GitHub
    UNKNOWN_KEY
    #Unknown signature type
    UNKNOWN_SIG_TYPE
    #Unsigned
    UNSIGNED
    #Email used for signing unverified on GitHub
    UNVERIFIED_EMAIL
    #Valid signature and verified by GitHub
    VALID
}

"The possible states in which authentication can be configured with an identity provider."
enum GitHub_IdentityProviderConfigurationState {
    #Authentication with an identity provider is configured but not enforced.
    CONFIGURED
    #Authentication with an identity provider is configured and enforced.
    ENFORCED
    #Authentication with an identity provider is not configured.
    UNCONFIGURED
}

"Properties by which issue connections can be ordered."
enum GitHub_IssueOrderField {
    #Order issues by comment count
    COMMENTS
    #Order issues by creation time
    CREATED_AT
    #Order issues by update time
    UPDATED_AT
}

"The possible PubSub channels for an issue."
enum GitHub_IssuePubSubTopic {
    #The channel ID for marking an issue as read.
    MARKASREAD
    #The channel ID for observing issue state updates.
    STATE
    #The channel ID for updating items on the issue timeline.
    TIMELINE
    #The channel ID for observing issue updates.
    UPDATED
}

"The possible states of an issue."
enum GitHub_IssueState {
    #An issue that has been closed
    CLOSED
    #An issue that is still open
    OPEN
}

"The possible item types found in a timeline."
enum GitHub_IssueTimelineItemsItemType {
    #Represents a 'added_to_project' event on a given issue or pull request.
    ADDED_TO_PROJECT_EVENT
    #Represents an 'assigned' event on any assignable object.
    ASSIGNED_EVENT
    #Represents a 'closed' event on any `Closable`.
    CLOSED_EVENT
    #Represents a 'comment_deleted' event on a given issue or pull request.
    COMMENT_DELETED_EVENT
    #Represents a 'converted_note_to_issue' event on a given issue or pull request.
    CONVERTED_NOTE_TO_ISSUE_EVENT
    #Represents a mention made by one issue or pull request to another.
    CROSS_REFERENCED_EVENT
    #Represents a 'demilestoned' event on a given issue or pull request.
    DEMILESTONED_EVENT
    #Represents a comment on an Issue.
    ISSUE_COMMENT
    #Represents a 'labeled' event on a given issue or pull request.
    LABELED_EVENT
    #Represents a 'locked' event on a given issue or pull request.
    LOCKED_EVENT
    #Represents a 'mentioned' event on a given issue or pull request.
    MENTIONED_EVENT
    #Represents a 'milestoned' event on a given issue or pull request.
    MILESTONED_EVENT
    #Represents a 'moved_columns_in_project' event on a given issue or pull request.
    MOVED_COLUMNS_IN_PROJECT_EVENT
    #Represents a 'pinned' event on a given issue or pull request.
    PINNED_EVENT
    #Represents a 'referenced' event on a given `ReferencedSubject`.
    REFERENCED_EVENT
    #Represents a 'removed_from_project' event on a given issue or pull request.
    REMOVED_FROM_PROJECT_EVENT
    #Represents a 'renamed' event on a given issue or pull request
    RENAMED_TITLE_EVENT
    #Represents a 'reopened' event on any `Closable`.
    REOPENED_EVENT
    #Represents a 'subscribed' event on a given `Subscribable`.
    SUBSCRIBED_EVENT
    #Represents a 'transferred' event on a given issue or pull request.
    TRANSFERRED_EVENT
    #Represents an 'unassigned' event on any assignable object.
    UNASSIGNED_EVENT
    #Represents an 'unlabeled' event on a given issue or pull request.
    UNLABELED_EVENT
    #Represents an 'unlocked' event on a given issue or pull request.
    UNLOCKED_EVENT
    #Represents an 'unpinned' event on a given issue or pull request.
    UNPINNED_EVENT
    #Represents an 'unsubscribed' event on a given `Subscribable`.
    UNSUBSCRIBED_EVENT
    #Represents a 'user_blocked' event on a given user.
    USER_BLOCKED_EVENT
}

"Properties by which language connections can be ordered."
enum GitHub_LanguageOrderField {
    #Order languages by the size of all files containing the language
    SIZE
}

"The possible reasons that an issue or pull request was locked."
enum GitHub_LockReason {
    #The issue or pull request was locked because the conversation was off-topic.
    OFF_TOPIC
    #The issue or pull request was locked because the conversation was resolved.
    RESOLVED
    #The issue or pull request was locked because the conversation was spam.
    SPAM
    #The issue or pull request was locked because the conversation was too heated.
    TOO_HEATED
}

"Whether or not a PullRequest can be merged."
enum GitHub_MergeableState {
    #The pull request cannot be merged due to merge conflicts.
    CONFLICTING
    #The pull request can be merged.
    MERGEABLE
    #The mergeability of the pull request is still being calculated.
    UNKNOWN
}

"Properties by which milestone connections can be ordered."
enum GitHub_MilestoneOrderField {
    #Order milestones by when they were created.
    CREATED_AT
    #Order milestones by when they are due.
    DUE_DATE
    #Order milestones by their number.
    NUMBER
    #Order milestones by when they were last updated.
    UPDATED_AT
}

"The possible states of a milestone."
enum GitHub_MilestoneState {
    #A milestone that has been closed.
    CLOSED
    #A milestone that is still open.
    OPEN
}

"Possible directions in which to order a list of items when provided an `orderBy` argument."
enum GitHub_OrderDirection {
    #Specifies an ascending order for a given `orderBy` argument.
    ASC
    #Specifies a descending order for a given `orderBy` argument.
    DESC
}

"The possible organization invitation roles."
enum GitHub_OrganizationInvitationRole {
    #The user is invited to be an admin of the organization.
    ADMIN
    #The user is invited to be a billing manager of the organization.
    BILLING_MANAGER
    #The user is invited to be a direct member of the organization.
    DIRECT_MEMBER
    #The user's previous role will be reinstated.
    REINSTATE
}

"The possible organization invitation types."
enum GitHub_OrganizationInvitationType {
    #The invitation was to an email address.
    EMAIL
    #The invitation was to an existing user.
    USER
}

"The possible roles within an organization for its members."
enum GitHub_OrganizationMemberRole {
    #The user is an administrator of the organization.
    ADMIN
    #The user is a member of the organization.
    MEMBER
}

"Represents items that can be pinned to a profile page or dashboard."
enum GitHub_PinnableItemType {
    #A gist.
    GIST
    #An issue.
    ISSUE
    #A repository.
    REPOSITORY
}

"The possible archived states of a project card."
enum GitHub_ProjectCardArchivedState {
    #A project card that is archived
    ARCHIVED
    #A project card that is not archived
    NOT_ARCHIVED
}

"Various content states of a ProjectCard"
enum GitHub_ProjectCardState {
    #The card has content only.
    CONTENT_ONLY
    #The card has a note only.
    NOTE_ONLY
    #The card is redacted.
    REDACTED
}

"The semantic purpose of the column - todo, in progress, or done."
enum GitHub_ProjectColumnPurpose {
    #The column contains cards which are complete
    DONE
    #The column contains cards which are currently being worked on
    IN_PROGRESS
    #The column contains cards still to be worked on
    TODO
}

"Properties by which project connections can be ordered."
enum GitHub_ProjectOrderField {
    #Order projects by creation time
    CREATED_AT
    #Order projects by name
    NAME
    #Order projects by update time
    UPDATED_AT
}

"State of the project; either 'open' or 'closed'"
enum GitHub_ProjectState {
    #The project is closed.
    CLOSED
    #The project is open.
    OPEN
}

"Properties by which pull_requests connections can be ordered."
enum GitHub_PullRequestOrderField {
    #Order pull_requests by creation time
    CREATED_AT
    #Order pull_requests by update time
    UPDATED_AT
}

"The possible PubSub channels for a pull request."
enum GitHub_PullRequestPubSubTopic {
    #The channel ID for observing head ref updates.
    HEAD_REF
    #The channel ID for marking an pull request as read.
    MARKASREAD
    #The channel ID for observing pull request state updates.
    STATE
    #The channel ID for updating items on the pull request timeline.
    TIMELINE
    #The channel ID for observing pull request updates.
    UPDATED
}

"The possible states of a pull request review comment."
enum GitHub_PullRequestReviewCommentState {
    #A comment that is part of a pending review
    PENDING
    #A comment that is part of a submitted review
    SUBMITTED
}

"The possible events to perform on a pull request review."
enum GitHub_PullRequestReviewEvent {
    #Submit feedback and approve merging these changes.
    APPROVE
    #Submit general feedback without explicit approval.
    COMMENT
    #Dismiss review so it now longer effects merging.
    DISMISS
    #Submit feedback that must be addressed before merging.
    REQUEST_CHANGES
}

"The possible states of a pull request review."
enum GitHub_PullRequestReviewState {
    #A review allowing the pull request to merge.
    APPROVED
    #A review blocking the pull request from merging.
    CHANGES_REQUESTED
    #An informational review.
    COMMENTED
    #A review that has been dismissed.
    DISMISSED
    #A review that has not yet been submitted.
    PENDING
}

"The possible states of a pull request."
enum GitHub_PullRequestState {
    #A pull request that has been closed without being merged.
    CLOSED
    #A pull request that has been closed by being merged.
    MERGED
    #A pull request that is still open.
    OPEN
}

"The possible item types found in a timeline."
enum GitHub_PullRequestTimelineItemsItemType {
    #Represents a 'added_to_project' event on a given issue or pull request.
    ADDED_TO_PROJECT_EVENT
    #Represents an 'assigned' event on any assignable object.
    ASSIGNED_EVENT
    #Represents a 'base_ref_changed' event on a given issue or pull request.
    BASE_REF_CHANGED_EVENT
    #Represents a 'base_ref_force_pushed' event on a given pull request.
    BASE_REF_FORCE_PUSHED_EVENT
    #Represents a 'closed' event on any `Closable`.
    CLOSED_EVENT
    #Represents a 'comment_deleted' event on a given issue or pull request.
    COMMENT_DELETED_EVENT
    #Represents a 'converted_note_to_issue' event on a given issue or pull request.
    CONVERTED_NOTE_TO_ISSUE_EVENT
    #Represents a mention made by one issue or pull request to another.
    CROSS_REFERENCED_EVENT
    #Represents a 'demilestoned' event on a given issue or pull request.
    DEMILESTONED_EVENT
    #Represents a 'deployed' event on a given pull request.
    DEPLOYED_EVENT
    #Represents a 'deployment_environment_changed' event on a given pull request.
    DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
    #Represents a 'head_ref_deleted' event on a given pull request.
    HEAD_REF_DELETED_EVENT
    #Represents a 'head_ref_force_pushed' event on a given pull request.
    HEAD_REF_FORCE_PUSHED_EVENT
    #Represents a 'head_ref_restored' event on a given pull request.
    HEAD_REF_RESTORED_EVENT
    #Represents a comment on an Issue.
    ISSUE_COMMENT
    #Represents a 'labeled' event on a given issue or pull request.
    LABELED_EVENT
    #Represents a 'locked' event on a given issue or pull request.
    LOCKED_EVENT
    #Represents a 'mentioned' event on a given issue or pull request.
    MENTIONED_EVENT
    #Represents a 'merged' event on a given pull request.
    MERGED_EVENT
    #Represents a 'milestoned' event on a given issue or pull request.
    MILESTONED_EVENT
    #Represents a 'moved_columns_in_project' event on a given issue or pull request.
    MOVED_COLUMNS_IN_PROJECT_EVENT
    #Represents a 'pinned' event on a given issue or pull request.
    PINNED_EVENT
    #Represents a Git commit part of a pull request.
    PULL_REQUEST_COMMIT
    #Represents a commit comment thread part of a pull request.
    PULL_REQUEST_COMMIT_COMMENT_THREAD
    #A review object for a given pull request.
    PULL_REQUEST_REVIEW
    #A threaded list of comments for a given pull request.
    PULL_REQUEST_REVIEW_THREAD
    #Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
    PULL_REQUEST_REVISION_MARKER
    #Represents a 'referenced' event on a given `ReferencedSubject`.
    REFERENCED_EVENT
    #Represents a 'removed_from_project' event on a given issue or pull request.
    REMOVED_FROM_PROJECT_EVENT
    #Represents a 'renamed' event on a given issue or pull request
    RENAMED_TITLE_EVENT
    #Represents a 'reopened' event on any `Closable`.
    REOPENED_EVENT
    #Represents a 'review_dismissed' event on a given issue or pull request.
    REVIEW_DISMISSED_EVENT
    #Represents an 'review_requested' event on a given pull request.
    REVIEW_REQUESTED_EVENT
    #Represents an 'review_request_removed' event on a given pull request.
    REVIEW_REQUEST_REMOVED_EVENT
    #Represents a 'subscribed' event on a given `Subscribable`.
    SUBSCRIBED_EVENT
    #Represents a 'transferred' event on a given issue or pull request.
    TRANSFERRED_EVENT
    #Represents an 'unassigned' event on any assignable object.
    UNASSIGNED_EVENT
    #Represents an 'unlabeled' event on a given issue or pull request.
    UNLABELED_EVENT
    #Represents an 'unlocked' event on a given issue or pull request.
    UNLOCKED_EVENT
    #Represents an 'unpinned' event on a given issue or pull request.
    UNPINNED_EVENT
    #Represents an 'unsubscribed' event on a given `Subscribable`.
    UNSUBSCRIBED_EVENT
    #Represents a 'user_blocked' event on a given user.
    USER_BLOCKED_EVENT
}

"Emojis that can be attached to Issues, Pull Requests and Comments."
enum GitHub_ReactionContent {
    #Represents the  emoji.
    CONFUSED
    #Represents the  emoji.
    EYES
    #Represents the ❤️ emoji.
    HEART
    #Represents the  emoji.
    HOORAY
    #Represents the  emoji.
    LAUGH
    #Represents the  emoji.
    ROCKET
    #Represents the  emoji.
    THUMBS_DOWN
    #Represents the  emoji.
    THUMBS_UP
}

"A list of fields that reactions can be ordered by."
enum GitHub_ReactionOrderField {
    #Allows ordering a list of reactions by when they were created.
    CREATED_AT
}

"Properties by which ref connections can be ordered."
enum GitHub_RefOrderField {
    #Order refs by their alphanumeric name
    ALPHABETICAL
    #Order refs by underlying commit date if the ref prefix is refs/tags/
    TAG_COMMIT_DATE
}

"Properties by which release connections can be ordered."
enum GitHub_ReleaseOrderField {
    #Order releases by creation time
    CREATED_AT
    #Order releases alphabetically by name
    NAME
}

"The reasons a piece of content can be reported or minimized."
enum GitHub_ReportedContentClassifiers {
    #An abusive or harassing piece of content
    ABUSE
    #An irrelevant piece of content
    OFF_TOPIC
    #An outdated piece of content
    OUTDATED
    #The content has been resolved
    RESOLVED
    #A spammy piece of content
    SPAM
}

"The affiliation of a user to a repository"
enum GitHub_RepositoryAffiliation {
    #Repositories that the user has been added to as a collaborator.
    COLLABORATOR
    #
    #Repositories that the user has access to through being a member of an
    #organization. This includes every repository on every team that the user is on.
    ORGANIZATION_MEMBER
    #Repositories that are owned by the authenticated user.
    OWNER
}

"The affiliation type between collaborator and repository."
enum GitHub_RepositoryCollaboratorAffiliation {
    #All collaborators of the repository.
    ALL
    #All outside collaborators of an organization-owned repository.
    OUTSIDE
}

"The reason a repository is listed as 'contributed'."
enum GitHub_RepositoryContributionType {
    #Created a commit
    COMMIT
    #Created an issue
    ISSUE
    #Created a pull request
    PULL_REQUEST
    #Reviewed a pull request
    PULL_REQUEST_REVIEW
    #Created the repository
    REPOSITORY
}

"The possible reasons a given repository could be in a locked state."
enum GitHub_RepositoryLockReason {
    #The repository is locked due to a billing related reason.
    BILLING
    #The repository is locked due to a migration.
    MIGRATING
    #The repository is locked due to a move.
    MOVING
    #The repository is locked due to a rename.
    RENAME
}

"Properties by which repository connections can be ordered."
enum GitHub_RepositoryOrderField {
    #Order repositories by creation time
    CREATED_AT
    #Order repositories by name
    NAME
    #Order repositories by push time
    PUSHED_AT
    #Order repositories by number of stargazers
    STARGAZERS
    #Order repositories by update time
    UPDATED_AT
}

"The access level to a repository"
enum GitHub_RepositoryPermission {
    #Can read, clone, push, and add collaborators
    ADMIN
    #Can read and clone
    READ
    #Can read, clone and push
    WRITE
}

"The privacy of a repository"
enum GitHub_RepositoryPrivacy {
    #Private
    PRIVATE
    #Public
    PUBLIC
}

"Represents the individual results of a search."
enum GitHub_SearchType {
    #Returns results matching issues in repositories.
    ISSUE
    #Returns results matching repositories.
    REPOSITORY
    #Returns results matching users and organizations on GitHub.
    USER
}

"The possible ecosystems of a security vulnerability's package."
enum GitHub_SecurityAdvisoryEcosystem {
    #Java artifacts hosted at the Maven central repository
    MAVEN
    #JavaScript packages hosted at npmjs.com
    NPM
    #.NET packages hosted at the NuGet Gallery
    NUGET
    #Python packages hosted at PyPI.org
    PIP
    #Ruby gems hosted at RubyGems.org
    RUBYGEMS
}

"Identifier formats available for advisories."
enum GitHub_SecurityAdvisoryIdentifierType {
    #Common Vulnerabilities and Exposures Identifier.
    CVE
    #GitHub Security Advisory ID.
    GHSA
}

"Properties by which security advisory connections can be ordered."
enum GitHub_SecurityAdvisoryOrderField {
    #Order advisories by publication time
    PUBLISHED_AT
    #Order advisories by update time
    UPDATED_AT
}

"Severity of the vulnerability."
enum GitHub_SecurityAdvisorySeverity {
    #Critical.
    CRITICAL
    #High.
    HIGH
    #Low.
    LOW
    #Moderate.
    MODERATE
}

"Properties by which security vulnerability connections can be ordered."
enum GitHub_SecurityVulnerabilityOrderField {
    #Order vulnerability by update time
    UPDATED_AT
}

"Properties by which star connections can be ordered."
enum GitHub_StarOrderField {
    #Allows ordering a list of stars by when they were created.
    STARRED_AT
}

"The possible commit status states."
enum GitHub_StatusState {
    #Status is errored.
    ERROR
    #Status is expected.
    EXPECTED
    #Status is failing.
    FAILURE
    #Status is pending.
    PENDING
    #Status is successful.
    SUCCESS
}

"The possible states of a subscription."
enum GitHub_SubscriptionState {
    #The User is never notified.
    IGNORED
    #The User is notified of all conversations.
    SUBSCRIBED
    #The User is only notified when participating or @mentioned.
    UNSUBSCRIBED
}

"Properties by which team member connections can be ordered."
enum GitHub_TeamMemberOrderField {
    #Order team members by creation time
    CREATED_AT
    #Order team members by login
    LOGIN
}

"The possible team member roles; either 'maintainer' or 'member'."
enum GitHub_TeamMemberRole {
    #A team maintainer has permission to add and remove team members.
    MAINTAINER
    #A team member has no administrative permissions on the team.
    MEMBER
}

"Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL."
enum GitHub_TeamMembershipType {
    #Includes immediate and child team members for the team.
    ALL
    #Includes only child team members for the team.
    CHILD_TEAM
    #Includes only immediate members of the team.
    IMMEDIATE
}

"Properties by which team connections can be ordered."
enum GitHub_TeamOrderField {
    #Allows ordering a list of teams by name.
    NAME
}

"The possible team privacy values."
enum GitHub_TeamPrivacy {
    #A secret team can only be seen by its members.
    SECRET
    #A visible team can be seen and @mentioned by every member of the organization.
    VISIBLE
}

"Properties by which team repository connections can be ordered."
enum GitHub_TeamRepositoryOrderField {
    #Order repositories by creation time
    CREATED_AT
    #Order repositories by name
    NAME
    #Order repositories by permission
    PERMISSION
    #Order repositories by push time
    PUSHED_AT
    #Order repositories by number of stargazers
    STARGAZERS
    #Order repositories by update time
    UPDATED_AT
}

"The role of a user on a team."
enum GitHub_TeamRole {
    #User has admin rights on the team.
    ADMIN
    #User is a member of the team.
    MEMBER
}

"Reason that the suggested topic is declined."
enum GitHub_TopicSuggestionDeclineReason {
    #The suggested topic is not relevant to the repository.
    NOT_RELEVANT
    #The viewer does not like the suggested topic.
    PERSONAL_PREFERENCE
    #The suggested topic is too general for the repository.
    TOO_GENERAL
    #The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
    TOO_SPECIFIC
}

"The possible durations that a user can be blocked for."
enum GitHub_UserBlockDuration {
    #The user was blocked for 1 day
    ONE_DAY
    #The user was blocked for 30 days
    ONE_MONTH
    #The user was blocked for 7 days
    ONE_WEEK
    #The user was blocked permanently
    PERMANENT
    #The user was blocked for 3 days
    THREE_DAYS
}

"Properties by which user status connections can be ordered."
enum GitHub_UserStatusOrderField {
    #Order user statuses by when they were updated.
    UPDATED_AT
}

enum GraphQLSourceFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fieldName
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    typeName
}

enum HeadingLevels {
    h1
    h2
    h3
    h4
    h5
    h6
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
}

enum ImageFormat {
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageSharpFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fixed___aspectRatio
    fixed___base64
    fixed___height
    fixed___originalName
    fixed___src
    fixed___srcSet
    fixed___srcSetWebp
    fixed___srcWebp
    fixed___tracedSVG
    fixed___width
    fluid___aspectRatio
    fluid___base64
    fluid___originalImg
    fluid___originalName
    fluid___presentationHeight
    fluid___presentationWidth
    fluid___sizes
    fluid___src
    fluid___srcSet
    fluid___srcSetWebp
    fluid___srcWebp
    fluid___tracedSVG
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    original___height
    original___src
    original___width
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    resize___aspectRatio
    resize___height
    resize___originalName
    resize___src
    resize___tracedSVG
    resize___width
    resolutions___aspectRatio
    resolutions___base64
    resolutions___height
    resolutions___originalName
    resolutions___src
    resolutions___srcSet
    resolutions___srcSetWebp
    resolutions___srcWebp
    resolutions___tracedSVG
    resolutions___width
    sizes___aspectRatio
    sizes___base64
    sizes___originalImg
    sizes___originalName
    sizes___presentationHeight
    sizes___presentationWidth
    sizes___sizes
    sizes___src
    sizes___srcSet
    sizes___srcSetWebp
    sizes___srcWebp
    sizes___tracedSVG
}

enum JobsYamlFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    company
    dates
    details
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCurrent
    link
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    tags
    title
}

enum MarkdownRemarkFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    excerpt
    excerptAst
    fields___slug
    fileAbsolutePath
    frontmatter___date
    frontmatter___description
    frontmatter___hidden
    frontmatter___kind
    frontmatter___repository___name
    frontmatter___repository___owner
    frontmatter___tags
    frontmatter___title
    frontmatter___url
    headings
    headings___depth
    headings___value
    html
    htmlAst
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    rawMarkdownBody
    tableOfContents
    timeToRead
    wordCount___paragraphs
    wordCount___sentences
    wordCount___words
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum ProjectsYamlFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    description
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    live
    more
    name
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    repository___name
    repository___owner
    tags
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___siteUrl
    siteMetadata___title
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    componentPath
    context___repoName
    context___repoOwner
    context___slug
    context___tag
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    jsonName
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___author
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___fieldName
    pluginCreator___pluginOptions___headers___Authorization
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___maxWidth
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___pathToConfigModule
    pluginCreator___pluginOptions___plugins
    pluginCreator___pluginOptions___plugins___id
    pluginCreator___pluginOptions___plugins___name
    pluginCreator___pluginOptions___plugins___pluginFilepath
    pluginCreator___pluginOptions___plugins___resolve
    pluginCreator___pluginOptions___plugins___version
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___typeName
    pluginCreator___pluginOptions___url
    pluginCreator___pluginOptions___wrapperStyle
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___author
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___background_color
    pluginOptions___display
    pluginOptions___fieldName
    pluginOptions___headers___Authorization
    pluginOptions___icon
    pluginOptions___maxWidth
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___pathToConfigModule
    pluginOptions___plugins
    pluginOptions___plugins___id
    pluginOptions___plugins___name
    pluginOptions___plugins___pluginFilepath
    pluginOptions___plugins___pluginOptions___maxWidth
    pluginOptions___plugins___pluginOptions___wrapperStyle
    pluginOptions___plugins___resolve
    pluginOptions___plugins___version
    pluginOptions___short_name
    pluginOptions___start_url
    pluginOptions___theme_color
    pluginOptions___typeName
    pluginOptions___url
    pluginOptions___wrapperStyle
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: IntQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String
    opacity: Int
    shadow: String
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: IntQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

"Autogenerated input type of AcceptTopicSuggestion"
input GitHub_AcceptTopicSuggestionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of the suggested topic."
    name: String!
    "The Node ID of the repository."
    repositoryId: ID!
}

"Autogenerated input type of AddAssigneesToAssignable"
input GitHub_AddAssigneesToAssignableInput {
    "The id of the assignable object to add assignees to."
    assignableId: ID!
    "The id of users to add as assignees."
    assigneeIds: [ID!]!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of AddComment"
input GitHub_AddCommentInput {
    "The contents of the comment."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the subject to modify."
    subjectId: ID!
}

"Autogenerated input type of AddLabelsToLabelable"
input GitHub_AddLabelsToLabelableInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ids of the labels to add."
    labelIds: [ID!]!
    "The id of the labelable object to add labels to."
    labelableId: ID!
}

"Autogenerated input type of AddProjectCard"
input GitHub_AddProjectCardInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The content of the card. Must be a member of the ProjectCardItem union"
    contentId: ID
    "The note on the card."
    note: String
    "The Node ID of the ProjectColumn."
    projectColumnId: ID!
}

"Autogenerated input type of AddProjectColumn"
input GitHub_AddProjectColumnInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of the column."
    name: String!
    "The Node ID of the project."
    projectId: ID!
}

"Autogenerated input type of AddPullRequestReviewComment"
input GitHub_AddPullRequestReviewCommentInput {
    "The text of the comment."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The SHA of the commit to comment on."
    commitOID: GitHub_GitObjectID
    "The comment id to reply to."
    inReplyTo: ID
    "The relative path of the file to comment on."
    path: String
    "The line index in the diff to comment on."
    position: Int
    "The Node ID of the review to modify."
    pullRequestReviewId: ID!
}

"Autogenerated input type of AddPullRequestReview"
input GitHub_AddPullRequestReviewInput {
    "The contents of the review body comment."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The review line comments."
    comments: [GitHub_DraftPullRequestReviewComment]
    "The commit OID the review pertains to."
    commitOID: GitHub_GitObjectID
    "The event to perform on the pull request review."
    event: GitHub_PullRequestReviewEvent
    "The Node ID of the pull request to modify."
    pullRequestId: ID!
}

"Autogenerated input type of AddReaction"
input GitHub_AddReactionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of the emoji to react with."
    content: GitHub_ReactionContent!
    "The Node ID of the subject to modify."
    subjectId: ID!
}

"Autogenerated input type of AddStar"
input GitHub_AddStarInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Starrable ID to star."
    starrableId: ID!
}

"Autogenerated input type of ChangeUserStatus"
input GitHub_ChangeUserStatusInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:."
    emoji: String
    "Whether this status should indicate you are not fully available on GitHub, e.g., you are away."
    limitedAvailability: Boolean = false
    "A short description of your current status."
    message: String
    """
    The ID of the organization whose members will be allowed to see the status. If
    omitted, the status will be publicly visible.
    """
    organizationId: ID
}

"Autogenerated input type of ClearLabelsFromLabelable"
input GitHub_ClearLabelsFromLabelableInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The id of the labelable object to clear the labels from."
    labelableId: ID!
}

"Autogenerated input type of CloneProject"
input GitHub_CloneProjectInput {
    "The description of the project."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Whether or not to clone the source project's workflows."
    includeWorkflows: Boolean!
    "The name of the project."
    name: String!
    "The visibility of the project, defaults to false (private)."
    public: Boolean
    "The source project to clone."
    sourceId: ID!
    "The owner ID to create the project under."
    targetOwnerId: ID!
}

"Autogenerated input type of CloseIssue"
input GitHub_CloseIssueInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the issue to be closed."
    issueId: ID!
}

"Autogenerated input type of ClosePullRequest"
input GitHub_ClosePullRequestInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the pull request to be closed."
    pullRequestId: ID!
}

"Specifies an author for filtering Git commits."
input GitHub_CommitAuthor {
    "Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."
    emails: [String!]
    """
    ID of a User to filter by. If non-null, only commits authored by this user
    will be returned. This field takes precedence over emails.
    """
    id: ID
}

"Ordering options for commit contribution connections."
input GitHub_CommitContributionOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field by which to order commit contributions."
    field: GitHub_CommitContributionOrderField!
}

"Ordering options for contribution connections."
input GitHub_ContributionOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field by which to order contributions."
    field: GitHub_ContributionOrderField!
}

"Autogenerated input type of ConvertProjectCardNoteToIssue"
input GitHub_ConvertProjectCardNoteToIssueInput {
    "The body of the newly created issue."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ProjectCard ID to convert."
    projectCardId: ID!
    "The ID of the repository to create the issue in."
    repositoryId: ID!
    "The title of the newly created issue. Defaults to the card's note text."
    title: String
}

"Autogenerated input type of CreateBranchProtectionRule"
input GitHub_CreateBranchProtectionRuleInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Will new commits pushed to matching branches dismiss pull request review approvals."
    dismissesStaleReviews: Boolean
    "Can admins overwrite branch protection."
    isAdminEnforced: Boolean
    "The glob-like pattern used to determine matching branches."
    pattern: String!
    "A list of User or Team IDs allowed to push to matching branches."
    pushActorIds: [ID!]
    "The global relay id of the repository in which a new branch protection rule should be created in."
    repositoryId: ID!
    "Number of approving reviews required to update matching branches."
    requiredApprovingReviewCount: Int
    "List of required status check contexts that must pass for commits to be accepted to matching branches."
    requiredStatusCheckContexts: [String!]
    "Are approving reviews required to update matching branches."
    requiresApprovingReviews: Boolean
    "Are reviews from code owners required to update matching branches."
    requiresCodeOwnerReviews: Boolean
    "Are commits required to be signed."
    requiresCommitSignatures: Boolean
    "Are status checks required to update matching branches."
    requiresStatusChecks: Boolean
    "Are branches required to be up to date before merging."
    requiresStrictStatusChecks: Boolean
    "Is pushing to matching branches restricted."
    restrictsPushes: Boolean
    "Is dismissal of pull request reviews restricted."
    restrictsReviewDismissals: Boolean
    "A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."
    reviewDismissalActorIds: [ID!]
}

"Autogenerated input type of CreateContentAttachment"
input GitHub_CreateContentAttachmentInput {
    "The body of the content attachment, which may contain markdown."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The node ID of the content_reference."
    contentReferenceId: ID!
    "The title of the content attachment."
    title: String!
}

"Autogenerated input type of CreateIssue"
input GitHub_CreateIssueInput {
    "The Node ID for the user assignee for this issue."
    assigneeIds: [ID!]
    "The body for the issue description."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "An array of Node IDs of labels for this issue."
    labelIds: [ID!]
    "The Node ID of the milestone for this issue."
    milestoneId: ID
    "An array of Node IDs for projects associated with this issue."
    projectIds: [ID!]
    "The Node ID of the repository."
    repositoryId: ID!
    "The title for the issue."
    title: String!
}

"Autogenerated input type of CreateProject"
input GitHub_CreateProjectInput {
    "The description of project."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of project."
    name: String!
    "The owner ID to create the project under."
    ownerId: ID!
}

"Autogenerated input type of CreatePullRequest"
input GitHub_CreatePullRequestInput {
    """
    The name of the branch you want your changes pulled into. This should be an existing branch
    on the current repository. You cannot update the base branch on a pull request to point
    to another repository.
    """
    baseRefName: String!
    "The contents of the pull request."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    """
    The name of the branch where your changes are implemented. For cross-repository pull requests
    in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
    """
    headRefName: String!
    "Indicates whether maintainers can modify the pull request."
    maintainerCanModify: Boolean = true
    "The Node ID of the repository."
    repositoryId: ID!
    "The title of the pull request."
    title: String!
}

"Autogenerated input type of DeclineTopicSuggestion"
input GitHub_DeclineTopicSuggestionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of the suggested topic."
    name: String!
    "The reason why the suggested topic is declined."
    reason: GitHub_TopicSuggestionDeclineReason!
    "The Node ID of the repository."
    repositoryId: ID!
}

"Autogenerated input type of DeleteBranchProtectionRule"
input GitHub_DeleteBranchProtectionRuleInput {
    "The global relay id of the branch protection rule to be deleted."
    branchProtectionRuleId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of DeleteIssueComment"
input GitHub_DeleteIssueCommentInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the comment to delete."
    id: ID!
}

"Autogenerated input type of DeleteIssue"
input GitHub_DeleteIssueInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the issue to delete."
    issueId: ID!
}

"Autogenerated input type of DeleteProjectCard"
input GitHub_DeleteProjectCardInput {
    "The id of the card to delete."
    cardId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of DeleteProjectColumn"
input GitHub_DeleteProjectColumnInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The id of the column to delete."
    columnId: ID!
}

"Autogenerated input type of DeleteProject"
input GitHub_DeleteProjectInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Project ID to update."
    projectId: ID!
}

"Autogenerated input type of DeletePullRequestReviewComment"
input GitHub_DeletePullRequestReviewCommentInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the comment to delete."
    id: ID!
}

"Autogenerated input type of DeletePullRequestReview"
input GitHub_DeletePullRequestReviewInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the pull request review to delete."
    pullRequestReviewId: ID!
}

"Ordering options for deployment connections"
input GitHub_DeploymentOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order deployments by."
    field: GitHub_DeploymentOrderField!
}

"Autogenerated input type of DismissPullRequestReview"
input GitHub_DismissPullRequestReviewInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The contents of the pull request review dismissal message."
    message: String!
    "The Node ID of the pull request review to modify."
    pullRequestReviewId: ID!
}

"Specifies a review comment to be left with a Pull Request Review."
input GitHub_DraftPullRequestReviewComment {
    "Body of the comment to leave."
    body: String!
    "Path to the file being commented on."
    path: String!
    "Position in the file to leave a comment on."
    position: Int!
}

"Ordering options for gist connections"
input GitHub_GistOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order repositories by."
    field: GitHub_GistOrderField!
}

"Autogenerated input type of ImportProject"
input GitHub_ImportProjectInput {
    "The description of Project."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "A list of columns containing issues and pull requests."
    columnImports: [GitHub_ProjectColumnImport!]!
    "The name of Project."
    name: String!
    "The name of the Organization or User to create the Project under."
    ownerName: String!
    "Whether the Project is public or not."
    public: Boolean = false
}

"Ways in which to filter lists of issues."
input GitHub_IssueFilters {
    """
    List issues assigned to given name. Pass in `null` for issues with no assigned
    user, and `*` for issues assigned to any user.
    """
    assignee: String
    "List issues created by given name."
    createdBy: String
    "List issues where the list of label names exist on the issue."
    labels: [String!]
    "List issues where the given name is mentioned in the issue."
    mentioned: String
    """
    List issues by given milestone argument. If an string representation of an
    integer is passed, it should refer to a milestone by its number field. Pass in
    `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
    """
    milestone: String
    "List issues that have been updated at or after the given date."
    since: GitHub_DateTime
    "List issues filtered by the list of states given."
    states: [GitHub_IssueState!]
    "List issues subscribed to by viewer."
    viewerSubscribed: Boolean = false
}

"Ways in which lists of issues can be ordered upon return."
input GitHub_IssueOrder {
    "The direction in which to order issues by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order issues by."
    field: GitHub_IssueOrderField!
}

"Ordering options for language connections."
input GitHub_LanguageOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order languages by."
    field: GitHub_LanguageOrderField!
}

"Autogenerated input type of LockLockable"
input GitHub_LockLockableInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "A reason for why the issue or pull request will be locked."
    lockReason: GitHub_LockReason
    "ID of the issue or pull request to be locked."
    lockableId: ID!
}

"Autogenerated input type of MergePullRequest"
input GitHub_MergePullRequestInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Commit body to use for the merge commit; if omitted, a default message will be used"
    commitBody: String
    "Commit headline to use for the merge commit; if omitted, a default message will be used."
    commitHeadline: String
    "OID that the pull request head ref must match to allow merge; if omitted, no check is performed."
    expectedHeadOid: GitHub_GitObjectID
    "ID of the pull request to be merged."
    pullRequestId: ID!
}

"Ordering options for milestone connections."
input GitHub_MilestoneOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order milestones by."
    field: GitHub_MilestoneOrderField!
}

"Autogenerated input type of MinimizeComment"
input GitHub_MinimizeCommentInput {
    "The classification of comment"
    classifier: GitHub_ReportedContentClassifiers!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the subject to modify."
    subjectId: ID!
}

"Autogenerated input type of MoveProjectCard"
input GitHub_MoveProjectCardInput {
    "Place the new card after the card with this id. Pass null to place it at the top."
    afterCardId: ID
    "The id of the card to move."
    cardId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The id of the column to move it into."
    columnId: ID!
}

"Autogenerated input type of MoveProjectColumn"
input GitHub_MoveProjectColumnInput {
    "Place the new column after the column with this id. Pass null to place it at the front."
    afterColumnId: ID
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The id of the column to move."
    columnId: ID!
}

"Autogenerated input type of PinIssue"
input GitHub_PinIssueInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the issue to be pinned"
    issueId: ID!
}

"An issue or PR and its owning repository to be used in a project card."
input GitHub_ProjectCardImport {
    "The issue or pull request number."
    number: Int!
    "Repository name with owner (owner/repository)."
    repository: String!
}

"A project column and a list of its issues and PRs."
input GitHub_ProjectColumnImport {
    "The name of the column."
    columnName: String!
    "A list of issues and pull requests in the column."
    issues: [GitHub_ProjectCardImport!]
    "The position of the column, starting from 0."
    position: Int!
}

"Ways in which lists of projects can be ordered upon return."
input GitHub_ProjectOrder {
    "The direction in which to order projects by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order projects by."
    field: GitHub_ProjectOrderField!
}

"Ways in which lists of issues can be ordered upon return."
input GitHub_PullRequestOrder {
    "The direction in which to order pull requests by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order pull requests by."
    field: GitHub_PullRequestOrderField!
}

"Ways in which lists of reactions can be ordered upon return."
input GitHub_ReactionOrder {
    "The direction in which to order reactions by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order reactions by."
    field: GitHub_ReactionOrderField!
}

"Ways in which lists of git refs can be ordered upon return."
input GitHub_RefOrder {
    "The direction in which to order refs by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order refs by."
    field: GitHub_RefOrderField!
}

"Ways in which lists of releases can be ordered upon return."
input GitHub_ReleaseOrder {
    "The direction in which to order releases by the specified field."
    direction: GitHub_OrderDirection!
    "The field in which to order releases by."
    field: GitHub_ReleaseOrderField!
}

"Autogenerated input type of RemoveAssigneesFromAssignable"
input GitHub_RemoveAssigneesFromAssignableInput {
    "The id of the assignable object to remove assignees from."
    assignableId: ID!
    "The id of users to remove as assignees."
    assigneeIds: [ID!]!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
}

"Autogenerated input type of RemoveLabelsFromLabelable"
input GitHub_RemoveLabelsFromLabelableInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ids of labels to remove."
    labelIds: [ID!]!
    "The id of the Labelable to remove labels from."
    labelableId: ID!
}

"Autogenerated input type of RemoveOutsideCollaborator"
input GitHub_RemoveOutsideCollaboratorInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the organization to remove the outside collaborator from."
    organizationId: ID!
    "The ID of the outside collaborator to remove."
    userId: ID!
}

"Autogenerated input type of RemoveReaction"
input GitHub_RemoveReactionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of the emoji reaction to remove."
    content: GitHub_ReactionContent!
    "The Node ID of the subject to modify."
    subjectId: ID!
}

"Autogenerated input type of RemoveStar"
input GitHub_RemoveStarInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Starrable ID to unstar."
    starrableId: ID!
}

"Autogenerated input type of ReopenIssue"
input GitHub_ReopenIssueInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the issue to be opened."
    issueId: ID!
}

"Autogenerated input type of ReopenPullRequest"
input GitHub_ReopenPullRequestInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the pull request to be reopened."
    pullRequestId: ID!
}

"Ordering options for repository connections"
input GitHub_RepositoryOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order repositories by."
    field: GitHub_RepositoryOrderField!
}

"Autogenerated input type of RequestReviews"
input GitHub_RequestReviewsInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the pull request to modify."
    pullRequestId: ID!
    "The Node IDs of the team to request."
    teamIds: [ID!]
    "Add users to the set rather than replace."
    union: Boolean
    "The Node IDs of the user to request."
    userIds: [ID!]
}

"Autogenerated input type of ResolveReviewThread"
input GitHub_ResolveReviewThreadInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the thread to resolve"
    threadId: ID!
}

"An advisory identifier to filter results on."
input GitHub_SecurityAdvisoryIdentifierFilter {
    "The identifier type."
    type: GitHub_SecurityAdvisoryIdentifierType!
    "The identifier string. Supports exact or partial matching."
    value: String!
}

"Ordering options for security advisory connections"
input GitHub_SecurityAdvisoryOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order security advisories by."
    field: GitHub_SecurityAdvisoryOrderField!
}

"Ordering options for security vulnerability connections"
input GitHub_SecurityVulnerabilityOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order security vulnerabilities by."
    field: GitHub_SecurityVulnerabilityOrderField!
}

"Ways in which star connections can be ordered."
input GitHub_StarOrder {
    "The direction in which to order nodes."
    direction: GitHub_OrderDirection!
    "The field in which to order nodes by."
    field: GitHub_StarOrderField!
}

"Autogenerated input type of SubmitPullRequestReview"
input GitHub_SubmitPullRequestReviewInput {
    "The text field to set on the Pull Request Review."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The event to send to the Pull Request Review."
    event: GitHub_PullRequestReviewEvent!
    "The Pull Request Review ID to submit."
    pullRequestReviewId: ID!
}

"Ordering options for team member connections"
input GitHub_TeamMemberOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order team members by."
    field: GitHub_TeamMemberOrderField!
}

"Ways in which team connections can be ordered."
input GitHub_TeamOrder {
    "The direction in which to order nodes."
    direction: GitHub_OrderDirection!
    "The field in which to order nodes by."
    field: GitHub_TeamOrderField!
}

"Ordering options for team repository connections"
input GitHub_TeamRepositoryOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order repositories by."
    field: GitHub_TeamRepositoryOrderField!
}

"Autogenerated input type of UnlockLockable"
input GitHub_UnlockLockableInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the issue or pull request to be unlocked."
    lockableId: ID!
}

"Autogenerated input type of UnmarkIssueAsDuplicate"
input GitHub_UnmarkIssueAsDuplicateInput {
    "ID of the issue or pull request currently considered canonical/authoritative/original."
    canonicalId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "ID of the issue or pull request currently marked as a duplicate."
    duplicateId: ID!
}

"Autogenerated input type of UnminimizeComment"
input GitHub_UnminimizeCommentInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the subject to modify."
    subjectId: ID!
}

"Autogenerated input type of UnpinIssue"
input GitHub_UnpinIssueInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the issue to be unpinned"
    issueId: ID!
}

"Autogenerated input type of UnresolveReviewThread"
input GitHub_UnresolveReviewThreadInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the thread to unresolve"
    threadId: ID!
}

"Autogenerated input type of UpdateBranchProtectionRule"
input GitHub_UpdateBranchProtectionRuleInput {
    "The global relay id of the branch protection rule to be updated."
    branchProtectionRuleId: ID!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Will new commits pushed to matching branches dismiss pull request review approvals."
    dismissesStaleReviews: Boolean
    "Can admins overwrite branch protection."
    isAdminEnforced: Boolean
    "The glob-like pattern used to determine matching branches."
    pattern: String
    "A list of User or Team IDs allowed to push to matching branches."
    pushActorIds: [ID!]
    "Number of approving reviews required to update matching branches."
    requiredApprovingReviewCount: Int
    "List of required status check contexts that must pass for commits to be accepted to matching branches."
    requiredStatusCheckContexts: [String!]
    "Are approving reviews required to update matching branches."
    requiresApprovingReviews: Boolean
    "Are reviews from code owners required to update matching branches."
    requiresCodeOwnerReviews: Boolean
    "Are commits required to be signed."
    requiresCommitSignatures: Boolean
    "Are status checks required to update matching branches."
    requiresStatusChecks: Boolean
    "Are branches required to be up to date before merging."
    requiresStrictStatusChecks: Boolean
    "Is pushing to matching branches restricted."
    restrictsPushes: Boolean
    "Is dismissal of pull request reviews restricted."
    restrictsReviewDismissals: Boolean
    "A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."
    reviewDismissalActorIds: [ID!]
}

"Autogenerated input type of UpdateIssueComment"
input GitHub_UpdateIssueCommentInput {
    "The updated text of the comment."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the IssueComment to modify."
    id: ID!
}

"Autogenerated input type of UpdateIssue"
input GitHub_UpdateIssueInput {
    "An array of Node IDs of users for this issue."
    assigneeIds: [ID!]
    "The body for the issue description."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The ID of the Issue to modify."
    id: ID!
    "An array of Node IDs of labels for this issue."
    labelIds: [ID!]
    "The Node ID of the milestone for this issue."
    milestoneId: ID
    "An array of Node IDs for projects associated with this issue."
    projectIds: [ID!]
    "The desired issue state."
    state: GitHub_IssueState
    "The title for the issue."
    title: String
}

"Autogenerated input type of UpdateProjectCard"
input GitHub_UpdateProjectCardInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Whether or not the ProjectCard should be archived"
    isArchived: Boolean
    "The note of ProjectCard."
    note: String
    "The ProjectCard ID to update."
    projectCardId: ID!
}

"Autogenerated input type of UpdateProjectColumn"
input GitHub_UpdateProjectColumnInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of project column."
    name: String!
    "The ProjectColumn ID to update."
    projectColumnId: ID!
}

"Autogenerated input type of UpdateProject"
input GitHub_UpdateProjectInput {
    "The description of project."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The name of project."
    name: String
    "The Project ID to update."
    projectId: ID!
    "Whether the project is public or not."
    public: Boolean
    "Whether the project is open or closed."
    state: GitHub_ProjectState
}

"Autogenerated input type of UpdatePullRequest"
input GitHub_UpdatePullRequestInput {
    """
    The name of the branch you want your changes pulled into. This should be an existing branch
    on the current repository.
    """
    baseRefName: String
    "The contents of the pull request."
    body: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "Indicates whether maintainers can modify the pull request."
    maintainerCanModify: Boolean
    "The Node ID of the pull request."
    pullRequestId: ID!
    "The title of the pull request."
    title: String
}

"Autogenerated input type of UpdatePullRequestReviewComment"
input GitHub_UpdatePullRequestReviewCommentInput {
    "The text of the comment."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the comment to modify."
    pullRequestReviewCommentId: ID!
}

"Autogenerated input type of UpdatePullRequestReview"
input GitHub_UpdatePullRequestReviewInput {
    "The contents of the pull request review body."
    body: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the pull request review to modify."
    pullRequestReviewId: ID!
}

"Autogenerated input type of UpdateSubscription"
input GitHub_UpdateSubscriptionInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The new state of the subscription."
    state: GitHub_SubscriptionState!
    "The Node ID of the subscribable object to modify."
    subscribableId: ID!
}

"Autogenerated input type of UpdateTopics"
input GitHub_UpdateTopicsInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "The Node ID of the repository."
    repositoryId: ID!
    "An array of topic names."
    topicNames: [String!]!
}

"Ordering options for user status connections."
input GitHub_UserStatusOrder {
    "The ordering direction."
    direction: GitHub_OrderDirection!
    "The field to order user statuses by."
    field: GitHub_UserStatusOrderField!
}

input GraphQLSourceFilterInput {
    children: NodeFilterListInput
    fieldName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
    fields: [GraphQLSourceFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
    resolutions: ImageSharpResolutionsFilterInput
    sizes: ImageSharpSizesFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpSizesFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input JobsYamlFilterInput {
    children: NodeFilterListInput
    company: StringQueryOperatorInput
    dates: StringQueryOperatorInput
    details: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    isCurrent: BooleanQueryOperatorInput
    link: StringQueryOperatorInput
    parent: NodeFilterInput
    tags: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input JobsYamlSortInput {
    fields: [JobsYamlFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input MarkdownHeadingFilterInput {
    depth: IntQueryOperatorInput
    value: StringQueryOperatorInput
}

input MarkdownHeadingFilterListInput {
    elemMatch: MarkdownHeadingFilterInput
}

input MarkdownRemarkFieldsFilterInput {
    slug: StringQueryOperatorInput
}

input MarkdownRemarkFilterInput {
    children: NodeFilterListInput
    excerpt: StringQueryOperatorInput
    excerptAst: JSONQueryOperatorInput
    fields: MarkdownRemarkFieldsFilterInput
    fileAbsolutePath: StringQueryOperatorInput
    frontmatter: MarkdownRemarkFrontmatterFilterInput
    headings: MarkdownHeadingFilterListInput
    html: StringQueryOperatorInput
    htmlAst: JSONQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    rawMarkdownBody: StringQueryOperatorInput
    tableOfContents: StringQueryOperatorInput
    timeToRead: IntQueryOperatorInput
    wordCount: wordCountFilterInput
}

input MarkdownRemarkFrontmatterFilterInput {
    date: DateQueryOperatorInput
    description: StringQueryOperatorInput
    hidden: BooleanQueryOperatorInput
    kind: StringQueryOperatorInput
    repository: MarkdownRemarkFrontmatterRepositoryFilterInput
    tags: StringQueryOperatorInput
    title: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input MarkdownRemarkFrontmatterRepositoryFilterInput {
    name: StringQueryOperatorInput
    owner: StringQueryOperatorInput
}

input MarkdownRemarkSortInput {
    fields: [MarkdownRemarkFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input ProjectsYamlFilterInput {
    children: NodeFilterListInput
    description: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    live: StringQueryOperatorInput
    more: StringQueryOperatorInput
    name: StringQueryOperatorInput
    parent: NodeFilterInput
    repository: ProjectsYamlRepositoryFilterInput
    tags: StringQueryOperatorInput
}

input ProjectsYamlRepositoryFilterInput {
    name: StringQueryOperatorInput
    owner: StringQueryOperatorInput
}

input ProjectsYamlSortInput {
    fields: [ProjectsYamlFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageContextFilterInput {
    repoName: StringQueryOperatorInput
    repoOwner: StringQueryOperatorInput
    slug: StringQueryOperatorInput
    tag: StringQueryOperatorInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    context: SitePageContextFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    jsonName: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    author: StringQueryOperatorInput
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    background_color: StringQueryOperatorInput
    display: StringQueryOperatorInput
    fieldName: StringQueryOperatorInput
    headers: SitePluginPluginOptionsHeadersFilterInput
    icon: StringQueryOperatorInput
    maxWidth: IntQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    pathToConfigModule: StringQueryOperatorInput
    plugins: SitePluginPluginOptionsPluginsFilterListInput
    short_name: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    theme_color: StringQueryOperatorInput
    typeName: StringQueryOperatorInput
    url: StringQueryOperatorInput
    wrapperStyle: StringQueryOperatorInput
}

input SitePluginPluginOptionsHeadersFilterInput {
    Authorization: StringQueryOperatorInput
}

input SitePluginPluginOptionsPluginsFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsPluginsPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPluginOptionsPluginsFilterListInput {
    elemMatch: SitePluginPluginOptionsPluginsFilterInput
}

input SitePluginPluginOptionsPluginsPluginOptionsFilterInput {
    maxWidth: IntQueryOperatorInput
    wrapperStyle: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    siteUrl: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input wordCountFilterInput {
    paragraphs: IntQueryOperatorInput
    sentences: IntQueryOperatorInput
    words: IntQueryOperatorInput
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."
scalar GitHub_URI

"An ISO-8601 encoded UTC date string."
scalar GitHub_DateTime

"A string containing HTML code."
scalar GitHub_HTML

"A Git object ID."
scalar GitHub_GitObjectID

"An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC."
scalar GitHub_GitTimestamp

"Git SSH string"
scalar GitHub_GitSSHRemote

"An ISO-8601 encoded date string."
scalar GitHub_Date

"A valid x509 certificate string"
scalar GitHub_X509Certificate